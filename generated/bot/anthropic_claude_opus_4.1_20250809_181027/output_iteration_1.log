
================================================================================
TIMESTAMP: 2025-08-09 18:11:36
MODEL: anthropic/claude-opus-4.1
PROMPT LENGTH: 9908 characters
RESPONSE LENGTH: 12858 characters
USAGE: {
  "prompt_tokens": 2682,
  "completion_tokens": 3872,
  "total_tokens": 6554
}

PROMPT:
You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

RESPONSE:
```python
from typing import List, Tuple, Dict
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
import random

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.hand = []
        self.starting_chips = 10000
        self.blind_amount = 0
        self.all_players = []
        self.hand_strength_cache = {}
        self.position_aggression_factor = 1.0
        self.opponent_stats = {}
        self.total_hands_played = 0
        
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.hand = player_hands
        self.starting_chips = starting_chips
        self.blind_amount = blind_amount
        self.all_players = all_players
        self.hand_strength_cache = {}
        self.total_hands_played += 1
        
        # Initialize opponent tracking
        for player_id in all_players:
            if player_id not in self.opponent_stats:
                self.opponent_stats[player_id] = {
                    'vpip': 0,  # Voluntarily put money in pot
                    'pfr': 0,   # Pre-flop raise
                    'hands': 0,
                    'folds': 0,
                    'raises': 0,
                    'calls': 0
                }
    
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        pass
    
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        # Track opponent actions
        self._update_opponent_stats(round_state)
        
        # Calculate pot odds
        pot_odds = self._calculate_pot_odds(round_state, remaining_chips)
        
        # Calculate hand strength
        hand_strength = self._evaluate_hand_strength(round_state)
        
        # Get position-based aggression
        position_factor = self._get_position_factor(round_state)
        
        # Determine action based on game state
        if round_state.round == 'Preflop':
            return self._preflop_strategy(round_state, remaining_chips, hand_strength, pot_odds, position_factor)
        else:
            return self._postflop_strategy(round_state, remaining_chips, hand_strength, pot_odds, position_factor)
    
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        pass
    
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        pass
    
    def _update_opponent_stats(self, round_state: RoundStateClient):
        for player_id, action in round_state.player_actions.items():
            if player_id == str(self.id):
                continue
            if player_id not in self.opponent_stats:
                self.opponent_stats[player_id] = {
                    'vpip': 0, 'pfr': 0, 'hands': 0, 'folds': 0, 'raises': 0, 'calls': 0
                }
            stats = self.opponent_stats[player_id]
            
            if action == 'Fold':
                stats['folds'] += 1
            elif action == 'Raise' or action == 'All-in':
                stats['raises'] += 1
            elif action == 'Call':
                stats['calls'] += 1
    
    def _calculate_pot_odds(self, round_state: RoundStateClient, remaining_chips: int):
        call_amount = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)
        if call_amount <= 0:
            return float('inf')
        
        total_pot = round_state.pot + call_amount
        return call_amount / (total_pot + 0.001)
    
    def _evaluate_hand_strength(self, round_state: RoundStateClient):
        # Cache key for performance
        cache_key = tuple(self.hand + round_state.community_cards)
        if cache_key in self.hand_strength_cache:
            return self.hand_strength_cache[cache_key]
        
        # Simplified hand strength evaluation
        strength = 0.0
        
        if round_state.round == 'Preflop':
            strength = self._preflop_hand_strength()
        else:
            strength = self._postflop_hand_strength(round_state.community_cards)
        
        self.hand_strength_cache[cache_key] = strength
        return strength
    
    def _preflop_hand_strength(self):
        if not self.hand or len(self.hand) < 2:
            return 0.2
            
        card1_rank = self._card_rank(self.hand[0])
        card2_rank = self._card_rank(self.hand[1])
        suited = self.hand[0][1] == self.hand[1][1]
        
        # Pocket pairs
        if card1_rank == card2_rank:
            if card1_rank >= 12:  # QQ+
                return 0.95
            elif card1_rank >= 10:  # TT-JJ
                return 0.85
            elif card1_rank >= 7:  # 77-99
                return 0.75
            else:
                return 0.65
        
        # High cards
        high_rank = max(card1_rank, card2_rank)
        low_rank = min(card1_rank, card2_rank)
        gap = high_rank - low_rank
        
        if high_rank == 14:  # Ace high
            if low_rank >= 11:  # AJ+
                return 0.85 if suited else 0.80
            elif low_rank >= 8:  # A8+
                return 0.70 if suited else 0.65
            else:
                return 0.55 if suited else 0.50
        
        if high_rank == 13:  # King high
            if low_rank >= 11:  # KJ+
                return 0.75 if suited else 0.70
            elif low_rank >= 9:  # K9+
                return 0.60 if suited else 0.55
            else:
                return 0.45 if suited else 0.40
        
        # Connected cards
        if gap == 1:
            return 0.60 if suited else 0.55
        elif gap == 2:
            return 0.50 if suited else 0.45
        
        # Default
        return 0.35 if suited else 0.30
    
    def _postflop_hand_strength(self, community_cards):
        all_cards = self.hand + community_cards
        
        # Check for made hands
        if self._has_flush(all_cards):
            return 0.90
        if self._has_straight(all_cards):
            return 0.85
        if self._has_three_of_kind(all_cards):
            return 0.80
        if self._has_two_pair(all_cards):
            return 0.70
        if self._has_pair(all_cards):
            return 0.55
        
        # High card
        return 0.30
    
    def _get_position_factor(self, round_state: RoundStateClient):
        num_players = len(round_state.current_player)
        if num_players <= 2:
            return 1.2
        
        # Estimate position based on betting order
        if len(round_state.player_actions) < num_players // 2:
            return 0.9  # Early position
        else:
            return 1.1  # Late position
    
    def _preflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, hand_strength: float, pot_odds: float, position_factor: float):
        my_bet = round_state.player_bets.get(str(self.id), 0)
        call_amount = round_state.current_bet - my_bet
        
        # Adjust strength based on position
        adjusted_strength = hand_strength * position_factor
        
        # Premium hands - always raise
        if adjusted_strength >= 0.90:
            if remaining_chips <= round_state.pot * 2:
                return (PokerAction.ALL_IN, 0)
            raise_amount = min(round_state.pot * 3, remaining_chips // 2)
            if raise_amount > round_state.min_raise:
                return (PokerAction.RAISE, raise_amount)
            elif call_amount > 0:
                return (PokerAction.CALL, 0)
            else:
                return (PokerAction.CHECK, 0)
        
        # Strong hands
        if adjusted_strength >= 0.70:
            if call_amount <= remaining_chips * 0.15:
                if random.random() < 0.6:
                    raise_amount = min(round_state.pot * 2, remaining_chips // 3)
                    if raise_amount > round_state.min_raise:
                        return (PokerAction.RAISE, raise_amount)
                if call_amount > 0:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.CHECK, 0)
            elif pot_odds < adjusted_strength - 0.2:
                return (PokerAction.CALL, 0)
        
        # Medium hands
        if adjusted_strength >= 0.50:
            if call_amount <= self.blind_amount * 3:
                if call_amount > 0:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.CHECK, 0)
        
        # Weak hands
        if call_amount == 0:
            return (PokerAction.CHECK, 0)
        else:
            return (PokerAction.FOLD, 0)
    
    def _postflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, hand_strength: float, pot_odds: float, position_factor: float):
        my_bet = round_state.player_bets.get(str(self.id), 0)
        call_amount = round_state.current_bet - my_bet
        
        # Adjust based on pot size and stack
        pot_to_stack = round_state.pot / (remaining_chips + 0.001)
        
        # Very strong hands
        if hand_strength >= 0.85:
            if pot_to_stack > 0.5 or remaining_chips < round_state.pot:
                return (PokerAction.ALL_IN, 0)
            
            raise_amount = min(round_state.pot * 0.75, remaining_chips // 2)
            if raise_amount > round_state.min_raise:
                return (PokerAction.RAISE, raise_amount)
            elif call_amount > 0:
                return (PokerAction.CALL, 0)
            else:
                # Value bet
                bet_amount = round_state.pot // 2
                if bet_amount > round_state.min_raise:
                    return (PokerAction.RAISE, bet_amount)
                return (PokerAction.CHECK, 0)
        
        # Good hands
        if hand_strength >= 0.60:
            if pot_odds < hand_strength - 0.3:
                if call_amount > 0:
                    return (PokerAction.CALL, 0)
                else:
                    # Small value bet
                    bet_amount = round_state.pot // 3
                    if bet_amount > round_state.min_raise and random.random() < 0.4:
                        return (PokerAction.RAISE, bet_amount)
                    return (PokerAction.CHECK, 0)
        
        # Drawing hands or marginal
        if hand_strength >= 0.40:
            if call_amount == 0:
                return (PokerAction.CHECK, 0)
            elif pot_odds < 0.2:
                return (PokerAction.CALL, 0)
        
        # Weak hands
        if call_amount == 0:
            return (PokerAction.CHECK, 0)
        else:
            return (PokerAction.FOLD, 0)
    
    def _card_rank(self, card):
        if not card or len(card) < 1:
            return 2
        rank = card[0]
        if rank == 'A':
            return 14
        elif rank == 'K':
            return 13
        elif rank == 'Q':
            return 12
        elif rank == 'J':
            return 11
        elif rank == 'T':
            return 10
        else:
            try:
                return int(rank)
            except:
                return 2
    
    def _has_flush(self, cards):
        suits = {}
        for card in cards:
            if len(card) >= 2:
                suit = card[1]
                suits[suit] = suits.get(suit, 0) + 1
                if suits[suit] >= 5:
                    return True
        return False
    
    def _has_straight(self, cards):
        ranks = set()
        for card in cards:
            ranks.add(self._card_rank(card))
        
        ranks = sorted(ranks)
        if len(ranks) < 5:
            return False
        
        for i in range(len(ranks) - 4):
            if ranks[i+4] - ranks[i] == 4:
                return True
        
        # Check A-2-3-4-5
        if 14 in ranks and set([2, 3, 4, 5]).issubset(ranks):
            return True
        
        return False
    
    def _has_three_of_kind(self, cards):
        ranks = {}
        for card in cards:
            rank = self._card_rank(card)
            ranks[rank] = ranks.get(rank, 0) + 1
            if ranks[rank] >= 3:
                return True
        return False
    
    def _has_two_pair(self, cards):
        ranks = {}
        for card in cards:
            rank = self._card_rank(card)
            ranks[rank] = ranks.get(rank, 0) + 1
        
        pairs = sum(1 for count in ranks.values() if count >= 2)
        return pairs >= 2
    
    def _has_pair(self, cards):
        ranks = {}
        for card in cards:
            rank = self._card_rank(card)
            ranks[rank] = ranks.get(rank, 0) + 1
            if ranks[rank] >= 2:
                return True
        return False
```

```text
```

RAW API RESPONSE:
{
  "id": "gen-1754788227-F4ykOnnhx0xpSMnV1xVe",
  "provider": "Anthropic",
  "model": "anthropic/claude-opus-4.1",
  "object": "chat.completion",
  "created": 1754788227,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple, Dict\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nimport random\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.hand = []\n        self.starting_chips = 10000\n        self.blind_amount = 0\n        self.all_players = []\n        self.hand_strength_cache = {}\n        self.position_aggression_factor = 1.0\n        self.opponent_stats = {}\n        self.total_hands_played = 0\n        \n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.hand = player_hands\n        self.starting_chips = starting_chips\n        self.blind_amount = blind_amount\n        self.all_players = all_players\n        self.hand_strength_cache = {}\n        self.total_hands_played += 1\n        \n        # Initialize opponent tracking\n        for player_id in all_players:\n            if player_id not in self.opponent_stats:\n                self.opponent_stats[player_id] = {\n                    'vpip': 0,  # Voluntarily put money in pot\n                    'pfr': 0,   # Pre-flop raise\n                    'hands': 0,\n                    'folds': 0,\n                    'raises': 0,\n                    'calls': 0\n                }\n    \n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        pass\n    \n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        # Track opponent actions\n        self._update_opponent_stats(round_state)\n        \n        # Calculate pot odds\n        pot_odds = self._calculate_pot_odds(round_state, remaining_chips)\n        \n        # Calculate hand strength\n        hand_strength = self._evaluate_hand_strength(round_state)\n        \n        # Get position-based aggression\n        position_factor = self._get_position_factor(round_state)\n        \n        # Determine action based on game state\n        if round_state.round == 'Preflop':\n            return self._preflop_strategy(round_state, remaining_chips, hand_strength, pot_odds, position_factor)\n        else:\n            return self._postflop_strategy(round_state, remaining_chips, hand_strength, pot_odds, position_factor)\n    \n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        pass\n    \n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        pass\n    \n    def _update_opponent_stats(self, round_state: RoundStateClient):\n        for player_id, action in round_state.player_actions.items():\n            if player_id == str(self.id):\n                continue\n            if player_id not in self.opponent_stats:\n                self.opponent_stats[player_id] = {\n                    'vpip': 0, 'pfr': 0, 'hands': 0, 'folds': 0, 'raises': 0, 'calls': 0\n                }\n            stats = self.opponent_stats[player_id]\n            \n            if action == 'Fold':\n                stats['folds'] += 1\n            elif action == 'Raise' or action == 'All-in':\n                stats['raises'] += 1\n            elif action == 'Call':\n                stats['calls'] += 1\n    \n    def _calculate_pot_odds(self, round_state: RoundStateClient, remaining_chips: int):\n        call_amount = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)\n        if call_amount <= 0:\n            return float('inf')\n        \n        total_pot = round_state.pot + call_amount\n        return call_amount / (total_pot + 0.001)\n    \n    def _evaluate_hand_strength(self, round_state: RoundStateClient):\n        # Cache key for performance\n        cache_key = tuple(self.hand + round_state.community_cards)\n        if cache_key in self.hand_strength_cache:\n            return self.hand_strength_cache[cache_key]\n        \n        # Simplified hand strength evaluation\n        strength = 0.0\n        \n        if round_state.round == 'Preflop':\n            strength = self._preflop_hand_strength()\n        else:\n            strength = self._postflop_hand_strength(round_state.community_cards)\n        \n        self.hand_strength_cache[cache_key] = strength\n        return strength\n    \n    def _preflop_hand_strength(self):\n        if not self.hand or len(self.hand) < 2:\n            return 0.2\n            \n        card1_rank = self._card_rank(self.hand[0])\n        card2_rank = self._card_rank(self.hand[1])\n        suited = self.hand[0][1] == self.hand[1][1]\n        \n        # Pocket pairs\n        if card1_rank == card2_rank:\n            if card1_rank >= 12:  # QQ+\n                return 0.95\n            elif card1_rank >= 10:  # TT-JJ\n                return 0.85\n            elif card1_rank >= 7:  # 77-99\n                return 0.75\n            else:\n                return 0.65\n        \n        # High cards\n        high_rank = max(card1_rank, card2_rank)\n        low_rank = min(card1_rank, card2_rank)\n        gap = high_rank - low_rank\n        \n        if high_rank == 14:  # Ace high\n            if low_rank >= 11:  # AJ+\n                return 0.85 if suited else 0.80\n            elif low_rank >= 8:  # A8+\n                return 0.70 if suited else 0.65\n            else:\n                return 0.55 if suited else 0.50\n        \n        if high_rank == 13:  # King high\n            if low_rank >= 11:  # KJ+\n                return 0.75 if suited else 0.70\n            elif low_rank >= 9:  # K9+\n                return 0.60 if suited else 0.55\n            else:\n                return 0.45 if suited else 0.40\n        \n        # Connected cards\n        if gap == 1:\n            return 0.60 if suited else 0.55\n        elif gap == 2:\n            return 0.50 if suited else 0.45\n        \n        # Default\n        return 0.35 if suited else 0.30\n    \n    def _postflop_hand_strength(self, community_cards):\n        all_cards = self.hand + community_cards\n        \n        # Check for made hands\n        if self._has_flush(all_cards):\n            return 0.90\n        if self._has_straight(all_cards):\n            return 0.85\n        if self._has_three_of_kind(all_cards):\n            return 0.80\n        if self._has_two_pair(all_cards):\n            return 0.70\n        if self._has_pair(all_cards):\n            return 0.55\n        \n        # High card\n        return 0.30\n    \n    def _get_position_factor(self, round_state: RoundStateClient):\n        num_players = len(round_state.current_player)\n        if num_players <= 2:\n            return 1.2\n        \n        # Estimate position based on betting order\n        if len(round_state.player_actions) < num_players // 2:\n            return 0.9  # Early position\n        else:\n            return 1.1  # Late position\n    \n    def _preflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, hand_strength: float, pot_odds: float, position_factor: float):\n        my_bet = round_state.player_bets.get(str(self.id), 0)\n        call_amount = round_state.current_bet - my_bet\n        \n        # Adjust strength based on position\n        adjusted_strength = hand_strength * position_factor\n        \n        # Premium hands - always raise\n        if adjusted_strength >= 0.90:\n            if remaining_chips <= round_state.pot * 2:\n                return (PokerAction.ALL_IN, 0)\n            raise_amount = min(round_state.pot * 3, remaining_chips // 2)\n            if raise_amount > round_state.min_raise:\n                return (PokerAction.RAISE, raise_amount)\n            elif call_amount > 0:\n                return (PokerAction.CALL, 0)\n            else:\n                return (PokerAction.CHECK, 0)\n        \n        # Strong hands\n        if adjusted_strength >= 0.70:\n            if call_amount <= remaining_chips * 0.15:\n                if random.random() < 0.6:\n                    raise_amount = min(round_state.pot * 2, remaining_chips // 3)\n                    if raise_amount > round_state.min_raise:\n                        return (PokerAction.RAISE, raise_amount)\n                if call_amount > 0:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.CHECK, 0)\n            elif pot_odds < adjusted_strength - 0.2:\n                return (PokerAction.CALL, 0)\n        \n        # Medium hands\n        if adjusted_strength >= 0.50:\n            if call_amount <= self.blind_amount * 3:\n                if call_amount > 0:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.CHECK, 0)\n        \n        # Weak hands\n        if call_amount == 0:\n            return (PokerAction.CHECK, 0)\n        else:\n            return (PokerAction.FOLD, 0)\n    \n    def _postflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, hand_strength: float, pot_odds: float, position_factor: float):\n        my_bet = round_state.player_bets.get(str(self.id), 0)\n        call_amount = round_state.current_bet - my_bet\n        \n        # Adjust based on pot size and stack\n        pot_to_stack = round_state.pot / (remaining_chips + 0.001)\n        \n        # Very strong hands\n        if hand_strength >= 0.85:\n            if pot_to_stack > 0.5 or remaining_chips < round_state.pot:\n                return (PokerAction.ALL_IN, 0)\n            \n            raise_amount = min(round_state.pot * 0.75, remaining_chips // 2)\n            if raise_amount > round_state.min_raise:\n                return (PokerAction.RAISE, raise_amount)\n            elif call_amount > 0:\n                return (PokerAction.CALL, 0)\n            else:\n                # Value bet\n                bet_amount = round_state.pot // 2\n                if bet_amount > round_state.min_raise:\n                    return (PokerAction.RAISE, bet_amount)\n                return (PokerAction.CHECK, 0)\n        \n        # Good hands\n        if hand_strength >= 0.60:\n            if pot_odds < hand_strength - 0.3:\n                if call_amount > 0:\n                    return (PokerAction.CALL, 0)\n                else:\n                    # Small value bet\n                    bet_amount = round_state.pot // 3\n                    if bet_amount > round_state.min_raise and random.random() < 0.4:\n                        return (PokerAction.RAISE, bet_amount)\n                    return (PokerAction.CHECK, 0)\n        \n        # Drawing hands or marginal\n        if hand_strength >= 0.40:\n            if call_amount == 0:\n                return (PokerAction.CHECK, 0)\n            elif pot_odds < 0.2:\n                return (PokerAction.CALL, 0)\n        \n        # Weak hands\n        if call_amount == 0:\n            return (PokerAction.CHECK, 0)\n        else:\n            return (PokerAction.FOLD, 0)\n    \n    def _card_rank(self, card):\n        if not card or len(card) < 1:\n            return 2\n        rank = card[0]\n        if rank == 'A':\n            return 14\n        elif rank == 'K':\n            return 13\n        elif rank == 'Q':\n            return 12\n        elif rank == 'J':\n            return 11\n        elif rank == 'T':\n            return 10\n        else:\n            try:\n                return int(rank)\n            except:\n                return 2\n    \n    def _has_flush(self, cards):\n        suits = {}\n        for card in cards:\n            if len(card) >= 2:\n                suit = card[1]\n                suits[suit] = suits.get(suit, 0) + 1\n                if suits[suit] >= 5:\n                    return True\n        return False\n    \n    def _has_straight(self, cards):\n        ranks = set()\n        for card in cards:\n            ranks.add(self._card_rank(card))\n        \n        ranks = sorted(ranks)\n        if len(ranks) < 5:\n            return False\n        \n        for i in range(len(ranks) - 4):\n            if ranks[i+4] - ranks[i] == 4:\n                return True\n        \n        # Check A-2-3-4-5\n        if 14 in ranks and set([2, 3, 4, 5]).issubset(ranks):\n            return True\n        \n        return False\n    \n    def _has_three_of_kind(self, cards):\n        ranks = {}\n        for card in cards:\n            rank = self._card_rank(card)\n            ranks[rank] = ranks.get(rank, 0) + 1\n            if ranks[rank] >= 3:\n                return True\n        return False\n    \n    def _has_two_pair(self, cards):\n        ranks = {}\n        for card in cards:\n            rank = self._card_rank(card)\n            ranks[rank] = ranks.get(rank, 0) + 1\n        \n        pairs = sum(1 for count in ranks.values() if count >= 2)\n        return pairs >= 2\n    \n    def _has_pair(self, cards):\n        ranks = {}\n        for card in cards:\n            rank = self._card_rank(card)\n            ranks[rank] = ranks.get(rank, 0) + 1\n            if ranks[rank] >= 2:\n                return True\n        return False\n```\n\n```text\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 2682,
    "completion_tokens": 3872,
    "total_tokens": 6554
  }
}
================================================================================
