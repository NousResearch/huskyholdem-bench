
================================================================================
TIMESTAMP: 2025-08-09 18:29:04
MODEL: qwen/qwen3-coder
PROMPT LENGTH: 22204 characters
RESPONSE LENGTH: 8888 characters
USAGE: {
  "prompt_tokens": 7699,
  "completion_tokens": 1962,
  "total_tokens": 9661,
  "prompt_tokens_details": null
}

PROMPT:

You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

ITERATION 4 FEEDBACK AND IMPROVEMENT REQUEST:
You are now working on iteration 4. Based on the previous iteration results and code, please improve the implementation.

PREVIOUS RESULTS:
- Success: True
- Error Message: 

ERRORS ENCOUNTERED:
Game Test Results for Iteration 3 - 2025-08-09 18:28:02
============================================================

No errors detected during game test.

CONTAINER LOGS:
--------------------
Test Client Logs:



POKER CLIENT LOGS:
--------------------
Poker Client Log: No critical errors detected in poker client logs



Please fix these specific errors in your implementation.

GAME PERFORMANCE DATA:

YOUR BOT PLAYER IDS: [2826151438]
When analyzing the game data below, focus on these player IDs as they represent YOUR bot's performance.


YOUR BOT PERFORMANCE SUMMARY (across 10 games):
- Average Game Score (Delta per Game): -9.00
- Total Game Score: -90.00
- Total Games Played: 10

Performance Analysis:
- Positive scores indicate profit per game
- Negative scores indicate losses per game
- Focus on improving average game score for better performance

[
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10010,
      "2826151438": 9990
    },
    "finalDelta": {
      "2049081830": 10,
      "2826151438": -10
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qc",
      "Jc",
      "9s",
      "Ac"
    ],
    "playerHands": {
      "2049081829": [
        "3s",
        "Th"
      ],
      "2826151437": [
        "2c",
        "2h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9990,
      "finalDelta": -10,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10090,
      "2826151438": 9910
    },
    "finalDelta": {
      "2049081830": 90,
      "2826151438": -90
    },
    "gameScores": {
      "2049081830": 5,
      "2826151438": -5
    },
    "rounds": 1,
    "finalBoard": [
      "Kh",
      "5h",
      "3c"
    ],
    "playerHands": {
      "2049081829": [
        "9d",
        "6c"
      ],
      "2826151437": [
        "9c",
        "2s"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9910,
      "finalDelta": -90,
      "gameScore": -5
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10020,
      "2826151438": 9980
    },
    "finalDelta": {
      "2049081830": 20,
      "2826151438": -20
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "9c",
      "7s",
      "2d",
      "Ts"
    ],
    "playerHands": {
      "2049081829": [
        "5c",
        "Jh"
      ],
      "2826151437": [
        "9h",
        "Ac"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9980,
      "finalDelta": -20,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10030,
      "2826151438": 9970
    },
    "finalDelta": {
      "2049081830": 30,
      "2826151438": -30
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "6d",
      "Ks",
      "Ac",
      "Qh"
    ],
    "playerHands": {
      "2049081829": [
        "Ah",
        "Jc"
      ],
      "2826151437": [
        "3d",
        "9h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9970,
      "finalDelta": -30,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10040,
      "2826151438": 9960
    },
    "finalDelta": {
      "2049081830": 40,
      "2826151438": -40
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Kh",
      "Kd",
      "As",
      "Jc"
    ],
    "playerHands": {
      "2049081829": [
        "Qd",
        "6h"
      ],
      "2826151437": [
        "Tc",
        "7s"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9960,
      "finalDelta": -40,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10050,
      "2826151438": 9950
    },
    "finalDelta": {
      "2049081830": 50,
      "2826151438": -50
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "5d",
      "8c",
      "6s",
      "2s"
    ],
    "playerHands": {
      "2049081829": [
        "5c",
        "5s"
      ],
      "2826151437": [
        "7d",
        "7h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9950,
      "finalDelta": -50,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10055,
      "2826151438": 9945
    },
    "finalDelta": {
      "2049081830": 55,
      "2826151438": -55
    },
    "gameScores": {
      "2049081830": 5,
      "2826151438": -5
    },
    "rounds": 1,
    "finalBoard": [
      "Js",
      "5s",
      "8h"
    ],
    "playerHands": {
      "2049081829": [
        "Td",
        "Qh"
      ],
      "2826151437": [
        "2h",
        "9d"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9945,
      "finalDelta": -55,
      "gameScore": -5
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10065,
      "2826151438": 9935
    },
    "finalDelta": {
      "2049081830": 65,
      "2826151438": -65
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qd",
      "3c",
      "As",
      "2c"
    ],
    "playerHands": {
      "2049081829": [
        "7c",
        "5h"
      ],
      "2826151437": [
        "Js",
        "7h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9935,
      "finalDelta": -65,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10075,
      "2826151438": 9925
    },
    "finalDelta": {
      "2049081830": 75,
      "2826151438": -75
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qh",
      "3c",
      "2d",
      "Th"
    ],
    "playerHands": {
      "2049081829": [
        "9s",
        "Jh"
      ],
      "2826151437": [
        "Ac",
        "3d"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9925,
      "finalDelta": -75,
      "gameScore": -10
    }
  },
  {
    "gameId": "1f760878-19d9-4b54-8c80-7ea746e6ce7f",
    "players": {
      "default": 2049081830,
      "client_container_5539_test_client_test_qwen_qwen3_coder_iter_3_20250809_182745_iter3": 2826151438
    },
    "playerNames": {
      "2049081829": "player2049081830",
      "2826151437": "player2826151438"
    },
    "finalMoney": {
      "2049081830": 10085,
      "2826151438": 9915
    },
    "finalDelta": {
      "2049081830": 85,
      "2826151438": -85
    },
    "gameScores": {
      "2049081830": 10,
      "2826151438": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qc",
      "2c",
      "4c",
      "7s"
    ],
    "playerHands": {
      "2049081829": [
        "8h",
        "As"
      ],
      "2826151437": [
        "Qd",
        "3c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2826151438,
    "botPerformance": {
      "finalMoney": 9915,
      "finalDelta": -85,
      "gameScore": -10
    }
  }
]

IMPORTANT: When analyzing the game performance data above, focus on the player ID that corresponds to YOUR bot implementation.
Look for your bot's performance in the 'gameScores' field, which shows the delta gain/loss for each individual game.

PERFORMANCE METRICS EXPLANATION:
- 'gameScores': Shows the profit/loss for each individual game (this is what matters most)
- Positive gameScore = Profit in that game
- Negative gameScore = Loss in that game
- Focus on improving your strategy to achieve positive gameScores consistently

Please analyze YOUR bot's gameScore performance and improve the strategy based on these results.

POKER CLIENT ERRORS:
No critical errors detected in poker client logs

Please investigate these errors in your poker client logs and fix any issues in your implementation.

IMPROVEMENT INSTRUCTIONS:
1. You are on iteration 4 - build upon the previous code
2. Analyze the errors and game performance data above
3. Fix any syntax, import, or runtime errors from the previous iteration
4. Improve the poker strategy based on game results
5. Ensure the code follows the exact template requirements
6. Return the improved implementation in the same format (Python code block + requirements.txt block)

Focus on making the bot more competitive and error-free. You can see exactly what was wrong with the previous version and should fix those specific issues.


RESPONSE:
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
import random

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.starting_chips = 0
        self.hand = []
        self.position = 0
        self.num_players = 0
        self.player_id = None
        self.is_big_blind = False
        self.is_small_blind = False

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.player_id = str(self.id)
        self.is_big_blind = (big_blind_player_id == self.id)
        self.is_small_blind = (small_blind_player_id == self.id)
        self.num_players = len(all_players)

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        self.hand = player_hands.get(self.player_id, [])

    def evaluate_hand_strength(self, hand: List[str], community_cards: List[str]) -> float:
        """Evaluates the strength of a hand (0 to 1)"""
        # Simplified hand evaluation based on card ranks and potential for improvement
        if not hand:
            return 0.0

        ranks = '23456789TJQKA'
        rank_values = {r: i for i, r in enumerate(ranks)}
        
        # Convert hand and community cards to tuples of (rank, suit)
        all_cards = hand + community_cards
        card_ranks = [card[0] for card in all_cards]
        card_suits = [card[1] for card in all_cards]
        
        # Count occurrences of each rank and suit
        rank_counts = {}
        suit_counts = {}
        for r in card_ranks:
            rank_counts[r] = rank_counts.get(r, 0) + 1
        for s in card_suits:
            suit_counts[s] = suit_counts.get(s, 0) + 1
            
        # Calculate base strength
        max_rank_value = max([rank_values[r] for r in card_ranks])
        base_strength = max_rank_value / 12.0  # Normalize between 0 and 1 based on highest rank value
        
        # Check for pairs, trips, etc.
        pair_bonus = 0
        three_of_kind_bonus = 0
        four_of_kind_bonus = 0
        flush_potential_bonus = 0
        
        for count in rank_counts.values():
            if count == 2:
                pair_bonus += 0.1
            elif count == 3:
                three_of_kind_bonus += 0.2
            elif count == 4:
                four_of_kind_bonus += 0.4
                
        # Check for flush potential
        for count in suit_counts.values():
            if count >= 4:
                flush_potential_bonus += 0.15
            elif count == 5:
                flush_potential_bonus += 0.3
                
        # Add bonuses
        total_strength = base_strength + pair_bonus + three_of_kind_bonus + four_of_kind_bonus + flush_potential_bonus
        
        # Cap at 1.0
        return min(total_strength, 1.0)

    def should_fold(self, round_state: RoundStateClient, remaining_chips: int) -> bool:
        # Fold if hand is weak and there's any bet to call
        if round_state.current_bet > 0:
            strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)
            
            # Preflop specific logic
            if round_state.round == 'Preflop':
                # Fold very weak hands pre-flop unless it's a small bet
                if strength < 0.3:
                    bet_ratio = round_state.current_bet / max(remaining_chips, 1)
                    if bet_ratio > 0.1:
                        return True
                        
            # Post-flop logic
            else:
                # Fold on weak hands when facing bets
                pot_odds = round_state.current_bet / max(round_state.pot, 1)
                if strength < pot_odds:
                    return True
                    
        return False

    def should_raise(self, round_state: RoundStateClient, remaining_chips: int) -> bool:
        # Aggressive raising with strong hands or in late position
        strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)
        
        # Pre-flop: Raise with premium hands
        if round_state.round == 'Preflop':
            if strength > 0.7:
                return True
        # Post-flop: Raise with strong hands
        else:
            if strength > 0.6:
                return True
        
        return False

    def calculate_raise_amount(self, round_state: RoundStateClient, remaining_chips: int, aggression_factor: float = 1.0) -> int:
        """Calculates an appropriate raise amount based on pot size and hand strength"""
        # Standard raise sizing: 2.5x to 4x current bet depending on hand strength and aggression
        base_raise = round_state.current_bet * 2.5
        max_raise = round_state.max_raise
        min_raise = round_state.min_raise
        
        # Cap at available chips
        if base_raise > remaining_chips:
            base_raise = remaining_chips
            
        # Ensure within valid range
        if base_raise < min_raise:
            base_raise = min_raise
        if base_raise > max_raise:
            base_raise = max_raise
            
        return int(base_raise)

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        # If we have no remaining chips, fold
        if remaining_chips <= 0:
            return (PokerAction.FOLD, 0)
            
        # Evaluate hand strength
        hand_strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)
        
        # Handle case where we can't make any valid action
        if round_state.min_raise > round_state.max_raise:
            # Can't raise, so decide between fold, check/call
            if round_state.current_bet == 0:
                return (PokerAction.CHECK, 0)
            else:
                # Current bet exists, we can only call or fold
                call_amount = round_state.current_bet - round_state.player_bets.get(self.player_id, 0)
                if call_amount > remaining_chips:
                    # Cannot afford to call, must fold or go all-in
                    return (PokerAction.FOLD, 0)
                elif call_amount == remaining_chips:
                    return (PokerAction.ALL_IN, 0)
                else:
                    if self.should_fold(round_state, remaining_chips):
                        return (PokerAction.FOLD, 0)
                    else:
                        return (PokerAction.CALL, 0)
        
        # Decision tree based on game state
        # No bet yet - can check or raise
        if round_state.current_bet == 0:
            if self.should_raise(round_state, remaining_chips):
                raise_amount = self.calculate_raise_amount(round_state, remaining_chips)
                return (PokerAction.RAISE, raise_amount)
            else:
                return (PokerAction.CHECK, 0)
                
        # There's a bet - need to call, raise, fold or go all-in
        else:
            call_amount = round_state.current_bet - round_state.player_bets.get(self.player_id, 0)
            
            # If we don't have enough to call, we can only fold or go all-in
            if call_amount > remaining_chips:
                if self.should_fold(round_state, remaining_chips):
                    return (PokerAction.FOLD, 0)
                else:
                    return (PokerAction.ALL_IN, 0)
                    
            # If call amount equals remaining chips, go all-in
            elif call_amount == remaining_chips:
                if self.should_fold(round_state, remaining_chips):
                    return (PokerAction.FOLD, 0)
                else:
                    return (PokerAction.ALL_IN, 0)
                    
            # Otherwise we can make normal decisions
            else:
                # Fold if hand is too weak
                if self.should_fold(round_state, remaining_chips):
                    return (PokerAction.FOLD, 0)
                    
                # Check if we want to raise
                elif self.should_raise(round_state, remaining_chips):
                    raise_amount = self.calculate_raise_amount(round_state, remaining_chips)
                    return (PokerAction.RAISE, raise_amount)
                    
                # Otherwise just call
                else:
                    return (PokerAction.CALL, 0)

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        # Nothing to do here for now
        pass

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # Nothing to do here for now
        pass
```

```text

```


RAW API RESPONSE:
{
  "id": "gen-1754789314-9BMmHyLbWoglO9PCN7gD",
  "provider": "DeepInfra",
  "model": "qwen/qwen3-coder",
  "object": "chat.completion",
  "created": 1754789314,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nimport random\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.starting_chips = 0\n        self.hand = []\n        self.position = 0\n        self.num_players = 0\n        self.player_id = None\n        self.is_big_blind = False\n        self.is_small_blind = False\n\n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.player_id = str(self.id)\n        self.is_big_blind = (big_blind_player_id == self.id)\n        self.is_small_blind = (small_blind_player_id == self.id)\n        self.num_players = len(all_players)\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        self.hand = player_hands.get(self.player_id, [])\n\n    def evaluate_hand_strength(self, hand: List[str], community_cards: List[str]) -> float:\n        \"\"\"Evaluates the strength of a hand (0 to 1)\"\"\"\n        # Simplified hand evaluation based on card ranks and potential for improvement\n        if not hand:\n            return 0.0\n\n        ranks = '23456789TJQKA'\n        rank_values = {r: i for i, r in enumerate(ranks)}\n        \n        # Convert hand and community cards to tuples of (rank, suit)\n        all_cards = hand + community_cards\n        card_ranks = [card[0] for card in all_cards]\n        card_suits = [card[1] for card in all_cards]\n        \n        # Count occurrences of each rank and suit\n        rank_counts = {}\n        suit_counts = {}\n        for r in card_ranks:\n            rank_counts[r] = rank_counts.get(r, 0) + 1\n        for s in card_suits:\n            suit_counts[s] = suit_counts.get(s, 0) + 1\n            \n        # Calculate base strength\n        max_rank_value = max([rank_values[r] for r in card_ranks])\n        base_strength = max_rank_value / 12.0  # Normalize between 0 and 1 based on highest rank value\n        \n        # Check for pairs, trips, etc.\n        pair_bonus = 0\n        three_of_kind_bonus = 0\n        four_of_kind_bonus = 0\n        flush_potential_bonus = 0\n        \n        for count in rank_counts.values():\n            if count == 2:\n                pair_bonus += 0.1\n            elif count == 3:\n                three_of_kind_bonus += 0.2\n            elif count == 4:\n                four_of_kind_bonus += 0.4\n                \n        # Check for flush potential\n        for count in suit_counts.values():\n            if count >= 4:\n                flush_potential_bonus += 0.15\n            elif count == 5:\n                flush_potential_bonus += 0.3\n                \n        # Add bonuses\n        total_strength = base_strength + pair_bonus + three_of_kind_bonus + four_of_kind_bonus + flush_potential_bonus\n        \n        # Cap at 1.0\n        return min(total_strength, 1.0)\n\n    def should_fold(self, round_state: RoundStateClient, remaining_chips: int) -> bool:\n        # Fold if hand is weak and there's any bet to call\n        if round_state.current_bet > 0:\n            strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)\n            \n            # Preflop specific logic\n            if round_state.round == 'Preflop':\n                # Fold very weak hands pre-flop unless it's a small bet\n                if strength < 0.3:\n                    bet_ratio = round_state.current_bet / max(remaining_chips, 1)\n                    if bet_ratio > 0.1:\n                        return True\n                        \n            # Post-flop logic\n            else:\n                # Fold on weak hands when facing bets\n                pot_odds = round_state.current_bet / max(round_state.pot, 1)\n                if strength < pot_odds:\n                    return True\n                    \n        return False\n\n    def should_raise(self, round_state: RoundStateClient, remaining_chips: int) -> bool:\n        # Aggressive raising with strong hands or in late position\n        strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)\n        \n        # Pre-flop: Raise with premium hands\n        if round_state.round == 'Preflop':\n            if strength > 0.7:\n                return True\n        # Post-flop: Raise with strong hands\n        else:\n            if strength > 0.6:\n                return True\n        \n        return False\n\n    def calculate_raise_amount(self, round_state: RoundStateClient, remaining_chips: int, aggression_factor: float = 1.0) -> int:\n        \"\"\"Calculates an appropriate raise amount based on pot size and hand strength\"\"\"\n        # Standard raise sizing: 2.5x to 4x current bet depending on hand strength and aggression\n        base_raise = round_state.current_bet * 2.5\n        max_raise = round_state.max_raise\n        min_raise = round_state.min_raise\n        \n        # Cap at available chips\n        if base_raise > remaining_chips:\n            base_raise = remaining_chips\n            \n        # Ensure within valid range\n        if base_raise < min_raise:\n            base_raise = min_raise\n        if base_raise > max_raise:\n            base_raise = max_raise\n            \n        return int(base_raise)\n\n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        # If we have no remaining chips, fold\n        if remaining_chips <= 0:\n            return (PokerAction.FOLD, 0)\n            \n        # Evaluate hand strength\n        hand_strength = self.evaluate_hand_strength(self.hand, round_state.community_cards)\n        \n        # Handle case where we can't make any valid action\n        if round_state.min_raise > round_state.max_raise:\n            # Can't raise, so decide between fold, check/call\n            if round_state.current_bet == 0:\n                return (PokerAction.CHECK, 0)\n            else:\n                # Current bet exists, we can only call or fold\n                call_amount = round_state.current_bet - round_state.player_bets.get(self.player_id, 0)\n                if call_amount > remaining_chips:\n                    # Cannot afford to call, must fold or go all-in\n                    return (PokerAction.FOLD, 0)\n                elif call_amount == remaining_chips:\n                    return (PokerAction.ALL_IN, 0)\n                else:\n                    if self.should_fold(round_state, remaining_chips):\n                        return (PokerAction.FOLD, 0)\n                    else:\n                        return (PokerAction.CALL, 0)\n        \n        # Decision tree based on game state\n        # No bet yet - can check or raise\n        if round_state.current_bet == 0:\n            if self.should_raise(round_state, remaining_chips):\n                raise_amount = self.calculate_raise_amount(round_state, remaining_chips)\n                return (PokerAction.RAISE, raise_amount)\n            else:\n                return (PokerAction.CHECK, 0)\n                \n        # There's a bet - need to call, raise, fold or go all-in\n        else:\n            call_amount = round_state.current_bet - round_state.player_bets.get(self.player_id, 0)\n            \n            # If we don't have enough to call, we can only fold or go all-in\n            if call_amount > remaining_chips:\n                if self.should_fold(round_state, remaining_chips):\n                    return (PokerAction.FOLD, 0)\n                else:\n                    return (PokerAction.ALL_IN, 0)\n                    \n            # If call amount equals remaining chips, go all-in\n            elif call_amount == remaining_chips:\n                if self.should_fold(round_state, remaining_chips):\n                    return (PokerAction.FOLD, 0)\n                else:\n                    return (PokerAction.ALL_IN, 0)\n                    \n            # Otherwise we can make normal decisions\n            else:\n                # Fold if hand is too weak\n                if self.should_fold(round_state, remaining_chips):\n                    return (PokerAction.FOLD, 0)\n                    \n                # Check if we want to raise\n                elif self.should_raise(round_state, remaining_chips):\n                    raise_amount = self.calculate_raise_amount(round_state, remaining_chips)\n                    return (PokerAction.RAISE, raise_amount)\n                    \n                # Otherwise just call\n                else:\n                    return (PokerAction.CALL, 0)\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        # Nothing to do here for now\n        pass\n\n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        # Nothing to do here for now\n        pass\n```\n\n```text\n\n```\n",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 7699,
    "completion_tokens": 1962,
    "total_tokens": 9661,
    "prompt_tokens_details": null
  }
}
================================================================================
