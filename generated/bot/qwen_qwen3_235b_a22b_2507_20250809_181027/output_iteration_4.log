
================================================================================
TIMESTAMP: 2025-08-09 18:14:41
MODEL: qwen/qwen3-235b-a22b-2507
PROMPT LENGTH: 11609 characters
RESPONSE LENGTH: 10151 characters
USAGE: {
  "prompt_tokens": 2764,
  "completion_tokens": 2378,
  "total_tokens": 5142
}

PROMPT:

You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

ITERATION 4 FEEDBACK AND IMPROVEMENT REQUEST:
You are now working on iteration 4. Based on the previous iteration results and code, please improve the implementation.

PREVIOUS RESULTS:
- Success: False
- Error Message: Critical errors in game testing

ERRORS ENCOUNTERED:
[2025-08-09 18:13:37] Code validation failed: Validation error: Traceback (most recent call last):
  File "/app/play_script.py", line 70, in <module>
    main()
  File "/app/play_script.py", line 51, in main
    p.on_round_start(round_state, 990)
  File "/app/player.py", line 38, in on_round_start
    self.strong_hole_cards = self.evaluate_hole_card_strength(self.player_hands) if self.player_hands else False
  File "/app/player.py", line 133, in evaluate_hole_card_strength
    values = [self.card_rank(card) for card in hole_cards]
  File "/app/player.py", line 133, in <listcomp>
    values = [self.card_rank(card) for card in hole_cards]
  File "/app/player.py", line 251, in card_rank
    return rank_map.get(r, int(r))
ValueError: invalid literal for int() with base 10: 'A'



Please fix these specific errors in your implementation.

IMPROVEMENT INSTRUCTIONS:
1. You are on iteration 4 - build upon the previous code
2. Analyze the errors and game performance data above
3. Fix any syntax, import, or runtime errors from the previous iteration
4. Improve the poker strategy based on game results
5. Ensure the code follows the exact template requirements
6. Return the improved implementation in the same format (Python code block + requirements.txt block)

Focus on making the bot more competitive and error-free. You can see exactly what was wrong with the previous version and should fix those specific issues.


RESPONSE:
```python
from typing import List, Tuple, Dict
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.player_hands = {}
        self.big_blind_amount = 0
        self.small_blind_amount = 0
        self.big_blind_player_id = None
        self.small_blind_player_id = None
        self.all_players = []
        self.strong_hole_cards = False
        self.positional_advantage = False
        self.game_stage = None
        self.starting_chips = 0
        self.hand_history = []

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.big_blind_amount = blind_amount
        self.small_blind_amount = blind_amount // 2
        self.big_blind_player_id = big_blind_player_id
        self.small_blind_player_id = small_blind_player_id
        self.all_players = all_players
        self.player_hands = {str(pid): None for pid in all_players}
        for pid, card in player_hands:
            self.player_hands[str(pid)] = card

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        self.game_stage = round_state.round
        my_id = str(self.id)
        if my_id in self.player_hands and self.player_hands[my_id]:
            hole_cards = self.player_hands[my_id]
            self.strong_hole_cards = self.evaluate_hole_card_strength(hole_cards)
        else:
            self.strong_holes_cards = False
        self.positional_advantage = self.is_in_late_position(round_state, my_id)

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        my_id = str(self.id)
        current_bet = round_state.current_bet
        min_raise = round_state.min_raise
        max_raise = round_state.max_raise
        my_current_bet = round_state.player_bets.get(my_id, 0)
        pot_size = round_state.pot
        num_community_cards = len(round_state.community_cards)
        
        # Default fallback action
        action = PokerAction.FOLD
        amount = 0

        # Check if we can check
        can_check = (current_bet == my_current_bet)
        
        # Determine hand strength based on game phase
        hand_strength = self.assess_hand_strength(my_id, round_state, remaining_chips)

        # Preflop strategy
        if num_community_cards == 0:
            if self.strong_hole_cards:
                if can_check:
                    action = PokerAction.RAISE
                    amount = min(max_raise, max(min_raise, pot_size // 2))
                else:
                    if current_bet - my_current_bet <= remaining_chips * 0.1:
                        action = PokerAction.CALL
                    else:
                        action = PokerAction.RAISE
                        amount = min(max_raise, current_bet - my_current_bet + min(pot_size // 2, max_raise))
            else:
                if can_check:
                    action = PokerAction.CHECK
                else:
                    action = PokerAction.FOLD

        # Post-flop strategies
        elif num_community_cards in [3, 4, 5]:
            draw_potential = self.has_draw_potential(round_state, my_id)
            made_hand = hand_strength > 0.5
            is_aggressive_betting = current_bet > pot_size * 0.3

            if made_hand:
                if can_check:
                    action = PokerAction.RAISE
                    amount = min(max_raise, pot_size)
                else:
                    if is_aggressive_betting:
                        action = PokerAction.CALL
                    else:
                        raise_amount = current_bet - my_current_bet + max(min_raise, pot_size)
                        action = PokerAction.RAISE
                        amount = min(max_raise, raise_amount)
            elif draw_potential and remaining_chips > 100:
                if can_check or (current_bet - my_current_bet) <= pot_size * 0.2:
                    action = PokerAction.CALL
                else:
                    action = PokerAction.FOLD
            else:
                if can_check:
                    action = PokerAction.CHECK
                else:
                    action = PokerAction.FOLD

        # All-in protection
        if action == PokerAction.RAISE:
            if amount <= 0:
                amount = min_raise if min_raise <= max_raise else max_raise
            if amount < min_raise:
                amount = min_raise
            if amount > max_raise:
                amount = max_raise
            if amount >= remaining_chips:
                action = PokerAction.ALL_IN
                amount = remaining_chips

        # Fallback safety
        if action == PokerAction.CALL:
            call_amount = current_bet - my_current_bet
            if call_amount >= remaining_chips:
                action = PokerAction.ALL_IN
            elif call_amount <= 0:
                action = PokerAction.CHECK
        elif action == PokerAction.RAISE and amount < min_raise:
            action = PokerAction.CALL

        return action, amount

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        self.hand_history.append({
            'round_num': round_state.round_num,
            'round': round_state.round,
            'pot': round_state.pot,
            'chips': remaining_chips,
            'actions': dict(round_state.player_actions)
        })

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        pass

    def is_in_late_position(self, round_state: RoundStateClient, player_id: str) -> bool:
        acting_players = round_state.current_player
        try:
            player_idx = acting_players.index(int(player_id))
            return player_idx >= len(acting_players) - 2
        except Exception:
            return False

    def assess_hand_strength(self, player_id: str, round_state: RoundStateClient, remaining_chips: int) -> float:
        hole_cards = self.player_hands.get(player_id, [])
        if not hole_cards:
            return 0.0
        community_cards = round_state.community_cards
        all_cards = hole_cards + community_cards
        hand_rank = self.evaluate_hand_rank(all_cards)
        return hand_rank / 9.0  # Normalize to 0-1 scale

    def evaluate_hand_rank(self, cards: List[str]) -> int:
        # Simplified hand evaluation: only does basic checks
        if len(cards) < 5:
            return self.evaluate_hole_card_strength(cards)
        
        values = [self.card_to_value(c[0]) for c in cards]
        suits = [c[1] for c in cards]
        value_counts = {v: values.count(v) for v in set(values)}
        suit_counts = {s: suits.count(s) for s in set(suits)}

        is_flush = max(suit_counts.values()) >= 5
        sorted_values = sorted(set(values), reverse=True)
        is_straight = False
        for i in range(len(sorted_values) - 4):
            if sorted_values[i] - sorted_values[i+4] == 4:
                is_straight = True
                break
        if 14 in sorted_values and 2 in sorted_values and 3 in sorted_values and 4 in sorted_values and 5 in sorted_values:
            is_straight = True

        has_four = 4 in value_counts.values()
        has_three = 3 in value_counts.values()
        pairs = list(value_counts.values()).count(2)
        has_two_pair = pairs >= 2
        has_pair = pairs == 1

        if is_straight and is_flush:
            return 8  # Straight flush
        elif has_four:
            return 7  # Four of a kind
        elif has_three and has_pair:
            return 6  # Full house
        elif is_flush:
            return 5  # Flush
        elif is_straight:
            return 4  # Straight
        elif has_three:
            return 3  # Three of a kind
        elif has_two_pair:
            return 2  # Two pair
        elif has_pair:
            return 1  # One pair
        else:
            return 0  # High card

    def has_draw_potential(self, round_state: RoundStateClient, player_id: str) -> bool:
        hole_cards = self.player_hands.get(player_id, [])
        if not hole_cards:
            return False
        all_cards = hole_cards + round_state.community_cards
        values = [self.card_to_value(c[0]) for c in all_cards]
        suits = [c[1] for c in all_cards]
        
        # Flush draw: 4 cards of same suit
        suit_count = {s: suits.count(s) for s in suits}
        if max(suit_count.values()) >= 4:
            return True
        
        # Open-ended straight draw
        value_set = set(values)
        for v in value_set:
            if (v + 1 in value_set and v + 2 in value_set and v + 3 in value_set) or \
               (v - 1 in value_set and v - 2 in value_set and v - 3 in value_set):
                return True

        return False

    def evaluate_hole_card_strength(self, hole_cards: List[str]) -> bool:
        if not hole_cards or len(hole_cards) < 2:
            return False
        try:
            v1 = self.card_to_value(hole_cards[0][0])
            v2 = self.card_to_value(hole_cards[1][0])
            s1 = hole_cards[0][1]
            s2 = hole_cards[1][1]

            # High pairs: TT, JJ, QQ, KK, AA
            if v1 == v2 and v1 >= 10:
                return True
            # High cards suited
            if max(v1, v2) >= 11 and s1 == s2:
                return True
            # Both high cards (broadway)
            if v1 >= 10 and v2 >= 10:
                return True
            # One high with connector
            if (v1 >= 10 or v2 >= 10) and abs(v1 - v2) == 1:
                return True
            return False
        except Exception:
            return False

    def card_to_value(self, card_rank: str) -> int:
        rank_map = {'A': 14, 'K': 13, 'Q': 12, 'J': 11}
        return rank_map.get(card_rank, int(card_rank) if card_rank.isdigit() else 2)

```

```text

```

RAW API RESPONSE:
{
  "id": "gen-1754788448-Amvq9AxVsy99qdHQ21FB",
  "provider": "Parasail",
  "model": "qwen/qwen3-235b-a22b-2507",
  "object": "chat.completion",
  "created": 1754788448,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple, Dict\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.player_hands = {}\n        self.big_blind_amount = 0\n        self.small_blind_amount = 0\n        self.big_blind_player_id = None\n        self.small_blind_player_id = None\n        self.all_players = []\n        self.strong_hole_cards = False\n        self.positional_advantage = False\n        self.game_stage = None\n        self.starting_chips = 0\n        self.hand_history = []\n\n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.big_blind_amount = blind_amount\n        self.small_blind_amount = blind_amount // 2\n        self.big_blind_player_id = big_blind_player_id\n        self.small_blind_player_id = small_blind_player_id\n        self.all_players = all_players\n        self.player_hands = {str(pid): None for pid in all_players}\n        for pid, card in player_hands:\n            self.player_hands[str(pid)] = card\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        self.game_stage = round_state.round\n        my_id = str(self.id)\n        if my_id in self.player_hands and self.player_hands[my_id]:\n            hole_cards = self.player_hands[my_id]\n            self.strong_hole_cards = self.evaluate_hole_card_strength(hole_cards)\n        else:\n            self.strong_holes_cards = False\n        self.positional_advantage = self.is_in_late_position(round_state, my_id)\n\n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        my_id = str(self.id)\n        current_bet = round_state.current_bet\n        min_raise = round_state.min_raise\n        max_raise = round_state.max_raise\n        my_current_bet = round_state.player_bets.get(my_id, 0)\n        pot_size = round_state.pot\n        num_community_cards = len(round_state.community_cards)\n        \n        # Default fallback action\n        action = PokerAction.FOLD\n        amount = 0\n\n        # Check if we can check\n        can_check = (current_bet == my_current_bet)\n        \n        # Determine hand strength based on game phase\n        hand_strength = self.assess_hand_strength(my_id, round_state, remaining_chips)\n\n        # Preflop strategy\n        if num_community_cards == 0:\n            if self.strong_hole_cards:\n                if can_check:\n                    action = PokerAction.RAISE\n                    amount = min(max_raise, max(min_raise, pot_size // 2))\n                else:\n                    if current_bet - my_current_bet <= remaining_chips * 0.1:\n                        action = PokerAction.CALL\n                    else:\n                        action = PokerAction.RAISE\n                        amount = min(max_raise, current_bet - my_current_bet + min(pot_size // 2, max_raise))\n            else:\n                if can_check:\n                    action = PokerAction.CHECK\n                else:\n                    action = PokerAction.FOLD\n\n        # Post-flop strategies\n        elif num_community_cards in [3, 4, 5]:\n            draw_potential = self.has_draw_potential(round_state, my_id)\n            made_hand = hand_strength > 0.5\n            is_aggressive_betting = current_bet > pot_size * 0.3\n\n            if made_hand:\n                if can_check:\n                    action = PokerAction.RAISE\n                    amount = min(max_raise, pot_size)\n                else:\n                    if is_aggressive_betting:\n                        action = PokerAction.CALL\n                    else:\n                        raise_amount = current_bet - my_current_bet + max(min_raise, pot_size)\n                        action = PokerAction.RAISE\n                        amount = min(max_raise, raise_amount)\n            elif draw_potential and remaining_chips > 100:\n                if can_check or (current_bet - my_current_bet) <= pot_size * 0.2:\n                    action = PokerAction.CALL\n                else:\n                    action = PokerAction.FOLD\n            else:\n                if can_check:\n                    action = PokerAction.CHECK\n                else:\n                    action = PokerAction.FOLD\n\n        # All-in protection\n        if action == PokerAction.RAISE:\n            if amount <= 0:\n                amount = min_raise if min_raise <= max_raise else max_raise\n            if amount < min_raise:\n                amount = min_raise\n            if amount > max_raise:\n                amount = max_raise\n            if amount >= remaining_chips:\n                action = PokerAction.ALL_IN\n                amount = remaining_chips\n\n        # Fallback safety\n        if action == PokerAction.CALL:\n            call_amount = current_bet - my_current_bet\n            if call_amount >= remaining_chips:\n                action = PokerAction.ALL_IN\n            elif call_amount <= 0:\n                action = PokerAction.CHECK\n        elif action == PokerAction.RAISE and amount < min_raise:\n            action = PokerAction.CALL\n\n        return action, amount\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        self.hand_history.append({\n            'round_num': round_state.round_num,\n            'round': round_state.round,\n            'pot': round_state.pot,\n            'chips': remaining_chips,\n            'actions': dict(round_state.player_actions)\n        })\n\n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        pass\n\n    def is_in_late_position(self, round_state: RoundStateClient, player_id: str) -> bool:\n        acting_players = round_state.current_player\n        try:\n            player_idx = acting_players.index(int(player_id))\n            return player_idx >= len(acting_players) - 2\n        except Exception:\n            return False\n\n    def assess_hand_strength(self, player_id: str, round_state: RoundStateClient, remaining_chips: int) -> float:\n        hole_cards = self.player_hands.get(player_id, [])\n        if not hole_cards:\n            return 0.0\n        community_cards = round_state.community_cards\n        all_cards = hole_cards + community_cards\n        hand_rank = self.evaluate_hand_rank(all_cards)\n        return hand_rank / 9.0  # Normalize to 0-1 scale\n\n    def evaluate_hand_rank(self, cards: List[str]) -> int:\n        # Simplified hand evaluation: only does basic checks\n        if len(cards) < 5:\n            return self.evaluate_hole_card_strength(cards)\n        \n        values = [self.card_to_value(c[0]) for c in cards]\n        suits = [c[1] for c in cards]\n        value_counts = {v: values.count(v) for v in set(values)}\n        suit_counts = {s: suits.count(s) for s in set(suits)}\n\n        is_flush = max(suit_counts.values()) >= 5\n        sorted_values = sorted(set(values), reverse=True)\n        is_straight = False\n        for i in range(len(sorted_values) - 4):\n            if sorted_values[i] - sorted_values[i+4] == 4:\n                is_straight = True\n                break\n        if 14 in sorted_values and 2 in sorted_values and 3 in sorted_values and 4 in sorted_values and 5 in sorted_values:\n            is_straight = True\n\n        has_four = 4 in value_counts.values()\n        has_three = 3 in value_counts.values()\n        pairs = list(value_counts.values()).count(2)\n        has_two_pair = pairs >= 2\n        has_pair = pairs == 1\n\n        if is_straight and is_flush:\n            return 8  # Straight flush\n        elif has_four:\n            return 7  # Four of a kind\n        elif has_three and has_pair:\n            return 6  # Full house\n        elif is_flush:\n            return 5  # Flush\n        elif is_straight:\n            return 4  # Straight\n        elif has_three:\n            return 3  # Three of a kind\n        elif has_two_pair:\n            return 2  # Two pair\n        elif has_pair:\n            return 1  # One pair\n        else:\n            return 0  # High card\n\n    def has_draw_potential(self, round_state: RoundStateClient, player_id: str) -> bool:\n        hole_cards = self.player_hands.get(player_id, [])\n        if not hole_cards:\n            return False\n        all_cards = hole_cards + round_state.community_cards\n        values = [self.card_to_value(c[0]) for c in all_cards]\n        suits = [c[1] for c in all_cards]\n        \n        # Flush draw: 4 cards of same suit\n        suit_count = {s: suits.count(s) for s in suits}\n        if max(suit_count.values()) >= 4:\n            return True\n        \n        # Open-ended straight draw\n        value_set = set(values)\n        for v in value_set:\n            if (v + 1 in value_set and v + 2 in value_set and v + 3 in value_set) or \\\n               (v - 1 in value_set and v - 2 in value_set and v - 3 in value_set):\n                return True\n\n        return False\n\n    def evaluate_hole_card_strength(self, hole_cards: List[str]) -> bool:\n        if not hole_cards or len(hole_cards) < 2:\n            return False\n        try:\n            v1 = self.card_to_value(hole_cards[0][0])\n            v2 = self.card_to_value(hole_cards[1][0])\n            s1 = hole_cards[0][1]\n            s2 = hole_cards[1][1]\n\n            # High pairs: TT, JJ, QQ, KK, AA\n            if v1 == v2 and v1 >= 10:\n                return True\n            # High cards suited\n            if max(v1, v2) >= 11 and s1 == s2:\n                return True\n            # Both high cards (broadway)\n            if v1 >= 10 and v2 >= 10:\n                return True\n            # One high with connector\n            if (v1 >= 10 or v2 >= 10) and abs(v1 - v2) == 1:\n                return True\n            return False\n        except Exception:\n            return False\n\n    def card_to_value(self, card_rank: str) -> int:\n        rank_map = {'A': 14, 'K': 13, 'Q': 12, 'J': 11}\n        return rank_map.get(card_rank, int(card_rank) if card_rank.isdigit() else 2)\n\n```\n\n```text\n\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 2764,
    "completion_tokens": 2378,
    "total_tokens": 5142
  }
}
================================================================================
