
================================================================================
TIMESTAMP: 2025-08-09 18:13:31
MODEL: qwen/qwen3-235b-a22b-2507
PROMPT LENGTH: 22249 characters
RESPONSE LENGTH: 10488 characters
USAGE: {
  "prompt_tokens": 7798,
  "completion_tokens": 2602,
  "total_tokens": 10400,
  "prompt_tokens_details": null
}

PROMPT:

You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

ITERATION 3 FEEDBACK AND IMPROVEMENT REQUEST:
You are now working on iteration 3. Based on the previous iteration results and code, please improve the implementation.

PREVIOUS RESULTS:
- Success: True
- Error Message: 

ERRORS ENCOUNTERED:
Game Test Results for Iteration 2 - 2025-08-09 18:11:22
============================================================

No errors detected during game test.

CONTAINER LOGS:
--------------------
Test Client Logs:



POKER CLIENT LOGS:
--------------------
Poker Client Log: No critical errors detected in poker client logs



Please fix these specific errors in your implementation.

GAME PERFORMANCE DATA:

YOUR BOT PLAYER IDS: [1584654984]
When analyzing the game data below, focus on these player IDs as they represent YOUR bot's performance.


YOUR BOT PERFORMANCE SUMMARY (across 10 games):
- Average Game Score (Delta per Game): -7.50
- Total Game Score: -75.00
- Total Games Played: 10

Performance Analysis:
- Positive scores indicate profit per game
- Negative scores indicate losses per game
- Focus on improving average game score for better performance

[
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10010,
      "1584654984": 9990
    },
    "finalDelta": {
      "4169293438": 10,
      "1584654984": -10
    },
    "gameScores": {
      "4169293438": 10,
      "1584654984": -10
    },
    "rounds": 2,
    "finalBoard": [
      "8h",
      "5h",
      "Ks",
      "Js"
    ],
    "playerHands": {
      "4169293437": [
        "3d",
        "2c"
      ],
      "1584654983": [
        "4h",
        "Jh"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9990,
      "finalDelta": -10,
      "gameScore": -10
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10075,
      "1584654984": 9925
    },
    "finalDelta": {
      "4169293438": 75,
      "1584654984": -75
    },
    "gameScores": {
      "4169293438": 5,
      "1584654984": -5
    },
    "rounds": 1,
    "finalBoard": [
      "Th",
      "4h",
      "2d"
    ],
    "playerHands": {
      "4169293437": [
        "Js",
        "Td"
      ],
      "1584654983": [
        "5c",
        "3c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9925,
      "finalDelta": -75,
      "gameScore": -5
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10015,
      "1584654984": 9985
    },
    "finalDelta": {
      "4169293438": 15,
      "1584654984": -15
    },
    "gameScores": {
      "4169293438": 5,
      "1584654984": -5
    },
    "rounds": 1,
    "finalBoard": [
      "3h",
      "4s",
      "Ad"
    ],
    "playerHands": {
      "4169293437": [
        "7c",
        "6s"
      ],
      "1584654983": [
        "2d",
        "6d"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9985,
      "finalDelta": -15,
      "gameScore": -5
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10025,
      "1584654984": 9975
    },
    "finalDelta": {
      "4169293438": 25,
      "1584654984": -25
    },
    "gameScores": {
      "4169293438": 10,
      "1584654984": -10
    },
    "rounds": 2,
    "finalBoard": [
      "7d",
      "7c",
      "Ts",
      "3c"
    ],
    "playerHands": {
      "4169293437": [
        "Ah",
        "Jc"
      ],
      "1584654983": [
        "5s",
        "8h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9975,
      "finalDelta": -25,
      "gameScore": -10
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10030,
      "1584654984": 9970
    },
    "finalDelta": {
      "4169293438": 30,
      "1584654984": -30
    },
    "gameScores": {
      "4169293438": 5,
      "1584654984": -5
    },
    "rounds": 1,
    "finalBoard": [
      "3c",
      "3h",
      "Kc"
    ],
    "playerHands": {
      "4169293437": [
        "Jd",
        "5h"
      ],
      "1584654983": [
        "6h",
        "4c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9970,
      "finalDelta": -30,
      "gameScore": -5
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10040,
      "1584654984": 9960
    },
    "finalDelta": {
      "4169293438": 40,
      "1584654984": -40
    },
    "gameScores": {
      "4169293438": 10,
      "1584654984": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Jd",
      "Tc",
      "8h",
      "Ks"
    ],
    "playerHands": {
      "4169293437": [
        "4c",
        "7h"
      ],
      "1584654983": [
        "9c",
        "Td"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9960,
      "finalDelta": -40,
      "gameScore": -10
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10045,
      "1584654984": 9955
    },
    "finalDelta": {
      "4169293438": 45,
      "1584654984": -45
    },
    "gameScores": {
      "4169293438": 5,
      "1584654984": -5
    },
    "rounds": 1,
    "finalBoard": [
      "Ts",
      "8c",
      "Qc"
    ],
    "playerHands": {
      "4169293437": [
        "As",
        "4s"
      ],
      "1584654983": [
        "Kd",
        "5d"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9955,
      "finalDelta": -45,
      "gameScore": -5
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10055,
      "1584654984": 9945
    },
    "finalDelta": {
      "4169293438": 55,
      "1584654984": -55
    },
    "gameScores": {
      "4169293438": 10,
      "1584654984": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Kc",
      "Ah",
      "Qc",
      "8h"
    ],
    "playerHands": {
      "4169293437": [
        "Qs",
        "3s"
      ],
      "1584654983": [
        "3c",
        "5s"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9945,
      "finalDelta": -55,
      "gameScore": -10
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10060,
      "1584654984": 9940
    },
    "finalDelta": {
      "4169293438": 60,
      "1584654984": -60
    },
    "gameScores": {
      "4169293438": 5,
      "1584654984": -5
    },
    "rounds": 1,
    "finalBoard": [
      "4d",
      "Qc",
      "Ts"
    ],
    "playerHands": {
      "4169293437": [
        "6c",
        "5d"
      ],
      "1584654983": [
        "9h",
        "Ac"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9940,
      "finalDelta": -60,
      "gameScore": -5
    }
  },
  {
    "gameId": "7da72f7a-a968-46f9-8e97-77991a683351",
    "players": {
      "default": 4169293438,
      "client_container_5841_test_client_test_qwen_qwen3_235b_a22b_2507_iter_2_20250809_181104_iter2": 1584654984
    },
    "playerNames": {
      "4169293437": "player4169293438",
      "1584654983": "player1584654984"
    },
    "finalMoney": {
      "4169293438": 10070,
      "1584654984": 9930
    },
    "finalDelta": {
      "4169293438": 70,
      "1584654984": -70
    },
    "gameScores": {
      "4169293438": 10,
      "1584654984": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qh",
      "Tc",
      "4c",
      "Jc"
    ],
    "playerHands": {
      "4169293437": [
        "8h",
        "6h"
      ],
      "1584654983": [
        "5h",
        "4h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 1584654984,
    "botPerformance": {
      "finalMoney": 9930,
      "finalDelta": -70,
      "gameScore": -10
    }
  }
]

IMPORTANT: When analyzing the game performance data above, focus on the player ID that corresponds to YOUR bot implementation.
Look for your bot's performance in the 'gameScores' field, which shows the delta gain/loss for each individual game.

PERFORMANCE METRICS EXPLANATION:
- 'gameScores': Shows the profit/loss for each individual game (this is what matters most)
- Positive gameScore = Profit in that game
- Negative gameScore = Loss in that game
- Focus on improving your strategy to achieve positive gameScores consistently

Please analyze YOUR bot's gameScore performance and improve the strategy based on these results.

POKER CLIENT ERRORS:
No critical errors detected in poker client logs

Please investigate these errors in your poker client logs and fix any issues in your implementation.

IMPROVEMENT INSTRUCTIONS:
1. You are on iteration 3 - build upon the previous code
2. Analyze the errors and game performance data above
3. Fix any syntax, import, or runtime errors from the previous iteration
4. Improve the poker strategy based on game results
5. Ensure the code follows the exact template requirements
6. Return the improved implementation in the same format (Python code block + requirements.txt block)

Focus on making the bot more competitive and error-free. You can see exactly what was wrong with the previous version and should fix those specific issues.


RESPONSE:
```python
from typing import List, Tuple, Dict, Any
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
import random
import re

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.starting_chips = 0
        self.player_hands = []
        self.blind_amount = 0
        self.big_blind_player_id = -1
        self.small_blind_player_id = -1
        self.all_players = []
        self.player_id = None
        self.is_big_blind = False
        self.is_small_blind = False
        self.position_score = 0
        self.hand_strength = 0.0
        self.strong_hole_cards = False
        self.round_num = 0

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.player_hands = player_hands
        self.blind_amount = blind_amount
        self.big_blind_player_id = big_blind_player_id
        self.small_blind_player_id = small_blind_player_id
        self.all_players = all_players

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        self.round_num = round_state.round_num
        if self.player_id is not None:
            self.is_big_blind = (self.player_id == self.big_blind_player_id)
            self.is_small_blind = (self.player_id == self.small_blind_player_id)
        self.strong_hole_cards = self.evaluate_hole_card_strength(self.player_hands) if self.player_hands else False
        self.hand_strength = self.estimate_hand_strength(round_state, remaining_chips)

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        self.player_id = round_state.current_player[0]  # Current player's ID
        round_name = round_state.round.lower()
        current_bet = round_state.current_bet
        min_raise = round_state.min_raise
        pot = round_state.pot
        player_bet = round_state.player_bets.get(str(self.player_id), 0)
        effective_pot = pot + current_bet * len(round_state.current_player)  # Estimate total pot inflow

        # Calculate how much we need to call
        to_call = current_bet - player_bet
        can_raise = min_raise > 0 and remaining_chips >= min_raise

        # Decide action based on round and state
        if round_name == "preflop":
            action, amount = self.preflop_strategy(round_state, remaining_chips, to_call, can_raise)
        else:
            board_cards = round_state.community_cards
            hand_rank = self.evaluate_hand(self.player_hands, board_cards)
            hand_type = hand_rank[0]
            hand_score = hand_rank[1]

            # Use hand strength and position to determine post-flop actions
            if hand_score > 0.8:
                # Strong hand: raise or bet big
                if can_raise:
                    raise_amount = min(remaining_chips, max(min_raise, int(effective_pot * 0.75)))
                    return (PokerAction.RAISE, raise_amount)
                return (PokerAction.CALL, 0)
            elif hand_score > 0.5:
                # Decent hand: call or small raise
                if to_call == 0:
                    if random.random() < 0.3 and can_raise:
                        raise_amount = min(remaining_chips, max(min_raise, int(effective_pot * 0.3)))
                        return (PokerAction.RAISE, raise_amount)
                    return (PokerAction.CHECK, 0)
                elif to_call <= remaining_chips * 0.5:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.FOLD, 0)
            elif hand_score > 0.3:
                # Weak hand: check/fold unless cheap
                if to_call == 0:
                    return (PokerAction.CHECK, 0)
                elif to_call <= remaining_chips * 0.2:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.FOLD, 0)
            else:
                # Very weak hand
                if to_call == 0:
                    return (PokerAction.CHECK, 0)
                else:
                    return (PokerAction.FOLD, 0)

        # Default fallback
        if action == PokerAction.RAISE and (amount < min_raise or amount > remaining_chips):
            # Adjust invalid raise amount
            amount = max(min_raise, min(amount, remaining_chips))
        return action, amount

    def preflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, to_call: int, can_raise: bool) -> Tuple[PokerAction, int]:
        pot = round_state.pot
        effective_pot = pot + to_call * len(round_state.current_player)

        if self.strong_hole_cards:
            if to_call == 0:
                # Open raise if strong hand and no bet
                if can_raise:
                    raise_amount = min(remaining_chips, max(min(6 * self.blind_amount, effective_pot // 3), self.blind_amount * 3))
                    return (PokerAction.RAISE, raise_amount)
                return (PokerAction.CHECK, 0)
            elif to_call <= remaining_chips * 0.5:
                # Call if raise is reasonable
                return (PokerAction.CALL, 0)
            else:
                # Fold to big 3-bet with caution
                if random.random() < 0.7:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.FOLD, 0)
        else:
            # Weak or marginal hand
            if to_call == 0:
                return (PokerAction.CHECK, 0)
            elif to_call <= self.blind_amount:
                return (PokerAction.CALL, 0)
            else:
                return (PokerAction.FOLD, 0)

    def evaluate_hole_card_strength(self, hole_cards: List[str]) -> bool:
        """ Estimate strength of hole cards using basic heuristic """
        values = [self.card_rank(card) for card in hole_cards]
        suits = [card[-1] for card in hole_cards]

        # Sort high to low
        values.sort(reverse=True)
        high_card = values[0]
        low_card = values[1]
        suited = suits[0] == suits[1]

        # Premium pairs
        if values[0] == values[1]:
            return True
        # High cards or connected
        if high_card >= 12:  # Ace or King
            if low_card >= 10 or suited:
                return True
            if high_card == 13 and low_card >= 11:  # KQ, KJ
                return True
        if high_card >= 11 and low_card >= 10 and abs(high_card - low_card) <= 1:  # Connected JTs, T9s, etc.
            return True
        return False

    def estimate_hand_strength(self, round_state: RoundStateClient, remaining_chips: int) -> float:
        """ Simple approximation of hand strength """
        if not round_state.community_cards:
            return 0.5 if self.strong_hole_cards else 0.3
        else:
            hand_rank = self.evaluate_hand(self.player_hands, round_state.community_cards)
            return hand_rank[1]

    def evaluate_hand(self, hole_cards: List[str], community_cards: List[str]) -> Tuple[int, float]:
        """ Evaluate the best 5-card poker hand and return (hand_type, score) """
        all_cards = hole_cards + community_cards
        ranks = [self.card_rank(card) for card in all_cards]
        suits = [card[-1] for card in all_cards]

        # Count rank and suit frequencies
        rank_count = {}
        suit_count = {}
        for r in ranks:
            rank_count[r] = rank_count.get(r, 0) + 1
        for s in suits:
            suit_count[s] = suit_count.get(s, 0) + 1

        # Sort by count then rank (descending)
        sorted_ranks = sorted(rank_count.items(), key=lambda x: (x[1], x[0]), reverse=True)

        # Flush check
        flush_suit = None
        for s, cnt in suit_count.items():
            if cnt >= 5:
                flush_suit = s
                break

        # Get flush cards
        flush_cards = [r for r, s in zip(ranks, suits) if s == flush_suit] if flush_suit else []

        # Sort ranks for straight check
        unique_ranks = sorted(set(ranks), reverse=True)
        if 14 in unique_ranks:  # Ace can be low for A-5 straight
            unique_ranks.append(1)

        # Check for straights
        straight_high = None
        for r in sorted(unique_ranks, reverse=True):
            if all((r-i) in unique_ranks for i in range(5)):
                straight_high = r
                break

        # Check royal and straight flush
        if flush_cards:
            flush_ranks = sorted([r for r, s in zip(ranks, suits) if s == flush_suit], reverse=True)
            for r in flush_ranks:
                if all((r-i) in flush_ranks for i in range(5)):
                    if r == 14:
                        return (9, 1.0)  # Royal Flush
                    flush_high = r
                    return (8, 0.95 + flush_high / 140)  # Straight Flush

        # Four of a kind
        if 4 in rank_count.values():
            return (7, 0.9)

        # Full house
        if 3 in rank_count.values() and 2 in rank_count.values():
            return (6, 0.8)

        # Flush
        if flush_suit and len(flush_cards) >= 5:
            return (5, 0.7)

        # Straight
        if straight_high:
            return (4, 0.6 + straight_high / 140)

        # Three of a kind
        if 3 in rank_count.values():
            return (3, 0.5)

        # Two pair
        pairs = [k for k, v in rank_count.items() if v == 2]
        if len(pairs) >= 2:
            return (2, 0.4)

        # One pair
        if len(pairs) == 1:
            return (1, 0.3)

        # High card
        return (0, 0.2 + sorted_ranks[0][0] / 140)

    def card_rank(self, card: str) -> int:
        """ Convert card string to numerical rank """
        match = re.match(r"([2-9TJQKA])([shdc])", card)
        if not match:
            return 0
        r = match.group(1)
        rank_map = {'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}
        return rank_map.get(r, int(r))

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        # Can be used for tracking win/loss or adjusting strategy
        pass

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # Optionally log final results or clean up
        pass
```


```text

```

RAW API RESPONSE:
{
  "id": "gen-1754788313-Nzaxx4olM5mxehMR85Ui",
  "provider": "DeepInfra",
  "model": "qwen/qwen3-235b-a22b-2507",
  "object": "chat.completion",
  "created": 1754788313,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple, Dict, Any\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nimport random\nimport re\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.starting_chips = 0\n        self.player_hands = []\n        self.blind_amount = 0\n        self.big_blind_player_id = -1\n        self.small_blind_player_id = -1\n        self.all_players = []\n        self.player_id = None\n        self.is_big_blind = False\n        self.is_small_blind = False\n        self.position_score = 0\n        self.hand_strength = 0.0\n        self.strong_hole_cards = False\n        self.round_num = 0\n\n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.player_hands = player_hands\n        self.blind_amount = blind_amount\n        self.big_blind_player_id = big_blind_player_id\n        self.small_blind_player_id = small_blind_player_id\n        self.all_players = all_players\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        self.round_num = round_state.round_num\n        if self.player_id is not None:\n            self.is_big_blind = (self.player_id == self.big_blind_player_id)\n            self.is_small_blind = (self.player_id == self.small_blind_player_id)\n        self.strong_hole_cards = self.evaluate_hole_card_strength(self.player_hands) if self.player_hands else False\n        self.hand_strength = self.estimate_hand_strength(round_state, remaining_chips)\n\n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        self.player_id = round_state.current_player[0]  # Current player's ID\n        round_name = round_state.round.lower()\n        current_bet = round_state.current_bet\n        min_raise = round_state.min_raise\n        pot = round_state.pot\n        player_bet = round_state.player_bets.get(str(self.player_id), 0)\n        effective_pot = pot + current_bet * len(round_state.current_player)  # Estimate total pot inflow\n\n        # Calculate how much we need to call\n        to_call = current_bet - player_bet\n        can_raise = min_raise > 0 and remaining_chips >= min_raise\n\n        # Decide action based on round and state\n        if round_name == \"preflop\":\n            action, amount = self.preflop_strategy(round_state, remaining_chips, to_call, can_raise)\n        else:\n            board_cards = round_state.community_cards\n            hand_rank = self.evaluate_hand(self.player_hands, board_cards)\n            hand_type = hand_rank[0]\n            hand_score = hand_rank[1]\n\n            # Use hand strength and position to determine post-flop actions\n            if hand_score > 0.8:\n                # Strong hand: raise or bet big\n                if can_raise:\n                    raise_amount = min(remaining_chips, max(min_raise, int(effective_pot * 0.75)))\n                    return (PokerAction.RAISE, raise_amount)\n                return (PokerAction.CALL, 0)\n            elif hand_score > 0.5:\n                # Decent hand: call or small raise\n                if to_call == 0:\n                    if random.random() < 0.3 and can_raise:\n                        raise_amount = min(remaining_chips, max(min_raise, int(effective_pot * 0.3)))\n                        return (PokerAction.RAISE, raise_amount)\n                    return (PokerAction.CHECK, 0)\n                elif to_call <= remaining_chips * 0.5:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n            elif hand_score > 0.3:\n                # Weak hand: check/fold unless cheap\n                if to_call == 0:\n                    return (PokerAction.CHECK, 0)\n                elif to_call <= remaining_chips * 0.2:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n            else:\n                # Very weak hand\n                if to_call == 0:\n                    return (PokerAction.CHECK, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n\n        # Default fallback\n        if action == PokerAction.RAISE and (amount < min_raise or amount > remaining_chips):\n            # Adjust invalid raise amount\n            amount = max(min_raise, min(amount, remaining_chips))\n        return action, amount\n\n    def preflop_strategy(self, round_state: RoundStateClient, remaining_chips: int, to_call: int, can_raise: bool) -> Tuple[PokerAction, int]:\n        pot = round_state.pot\n        effective_pot = pot + to_call * len(round_state.current_player)\n\n        if self.strong_hole_cards:\n            if to_call == 0:\n                # Open raise if strong hand and no bet\n                if can_raise:\n                    raise_amount = min(remaining_chips, max(min(6 * self.blind_amount, effective_pot // 3), self.blind_amount * 3))\n                    return (PokerAction.RAISE, raise_amount)\n                return (PokerAction.CHECK, 0)\n            elif to_call <= remaining_chips * 0.5:\n                # Call if raise is reasonable\n                return (PokerAction.CALL, 0)\n            else:\n                # Fold to big 3-bet with caution\n                if random.random() < 0.7:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n        else:\n            # Weak or marginal hand\n            if to_call == 0:\n                return (PokerAction.CHECK, 0)\n            elif to_call <= self.blind_amount:\n                return (PokerAction.CALL, 0)\n            else:\n                return (PokerAction.FOLD, 0)\n\n    def evaluate_hole_card_strength(self, hole_cards: List[str]) -> bool:\n        \"\"\" Estimate strength of hole cards using basic heuristic \"\"\"\n        values = [self.card_rank(card) for card in hole_cards]\n        suits = [card[-1] for card in hole_cards]\n\n        # Sort high to low\n        values.sort(reverse=True)\n        high_card = values[0]\n        low_card = values[1]\n        suited = suits[0] == suits[1]\n\n        # Premium pairs\n        if values[0] == values[1]:\n            return True\n        # High cards or connected\n        if high_card >= 12:  # Ace or King\n            if low_card >= 10 or suited:\n                return True\n            if high_card == 13 and low_card >= 11:  # KQ, KJ\n                return True\n        if high_card >= 11 and low_card >= 10 and abs(high_card - low_card) <= 1:  # Connected JTs, T9s, etc.\n            return True\n        return False\n\n    def estimate_hand_strength(self, round_state: RoundStateClient, remaining_chips: int) -> float:\n        \"\"\" Simple approximation of hand strength \"\"\"\n        if not round_state.community_cards:\n            return 0.5 if self.strong_hole_cards else 0.3\n        else:\n            hand_rank = self.evaluate_hand(self.player_hands, round_state.community_cards)\n            return hand_rank[1]\n\n    def evaluate_hand(self, hole_cards: List[str], community_cards: List[str]) -> Tuple[int, float]:\n        \"\"\" Evaluate the best 5-card poker hand and return (hand_type, score) \"\"\"\n        all_cards = hole_cards + community_cards\n        ranks = [self.card_rank(card) for card in all_cards]\n        suits = [card[-1] for card in all_cards]\n\n        # Count rank and suit frequencies\n        rank_count = {}\n        suit_count = {}\n        for r in ranks:\n            rank_count[r] = rank_count.get(r, 0) + 1\n        for s in suits:\n            suit_count[s] = suit_count.get(s, 0) + 1\n\n        # Sort by count then rank (descending)\n        sorted_ranks = sorted(rank_count.items(), key=lambda x: (x[1], x[0]), reverse=True)\n\n        # Flush check\n        flush_suit = None\n        for s, cnt in suit_count.items():\n            if cnt >= 5:\n                flush_suit = s\n                break\n\n        # Get flush cards\n        flush_cards = [r for r, s in zip(ranks, suits) if s == flush_suit] if flush_suit else []\n\n        # Sort ranks for straight check\n        unique_ranks = sorted(set(ranks), reverse=True)\n        if 14 in unique_ranks:  # Ace can be low for A-5 straight\n            unique_ranks.append(1)\n\n        # Check for straights\n        straight_high = None\n        for r in sorted(unique_ranks, reverse=True):\n            if all((r-i) in unique_ranks for i in range(5)):\n                straight_high = r\n                break\n\n        # Check royal and straight flush\n        if flush_cards:\n            flush_ranks = sorted([r for r, s in zip(ranks, suits) if s == flush_suit], reverse=True)\n            for r in flush_ranks:\n                if all((r-i) in flush_ranks for i in range(5)):\n                    if r == 14:\n                        return (9, 1.0)  # Royal Flush\n                    flush_high = r\n                    return (8, 0.95 + flush_high / 140)  # Straight Flush\n\n        # Four of a kind\n        if 4 in rank_count.values():\n            return (7, 0.9)\n\n        # Full house\n        if 3 in rank_count.values() and 2 in rank_count.values():\n            return (6, 0.8)\n\n        # Flush\n        if flush_suit and len(flush_cards) >= 5:\n            return (5, 0.7)\n\n        # Straight\n        if straight_high:\n            return (4, 0.6 + straight_high / 140)\n\n        # Three of a kind\n        if 3 in rank_count.values():\n            return (3, 0.5)\n\n        # Two pair\n        pairs = [k for k, v in rank_count.items() if v == 2]\n        if len(pairs) >= 2:\n            return (2, 0.4)\n\n        # One pair\n        if len(pairs) == 1:\n            return (1, 0.3)\n\n        # High card\n        return (0, 0.2 + sorted_ranks[0][0] / 140)\n\n    def card_rank(self, card: str) -> int:\n        \"\"\" Convert card string to numerical rank \"\"\"\n        match = re.match(r\"([2-9TJQKA])([shdc])\", card)\n        if not match:\n            return 0\n        r = match.group(1)\n        rank_map = {'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        return rank_map.get(r, int(r))\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        # Can be used for tracking win/loss or adjusting strategy\n        pass\n\n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        # Optionally log final results or clean up\n        pass\n```\n\n\n```text\n\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 7798,
    "completion_tokens": 2602,
    "total_tokens": 10400,
    "prompt_tokens_details": null
  }
}
================================================================================
