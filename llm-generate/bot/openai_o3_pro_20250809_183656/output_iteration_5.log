
    ================================================================================
    TIMESTAMP: 2025-08-09 18:52:58
    MODEL: openai/o3-pro (OpenAI Direct API)
    PROMPT LENGTH: 22144 characters
    RESPONSE LENGTH: 10475 characters
    USAGE: {
  "input_tokens": 6375,
  "input_tokens_details": {
    "cached_tokens": 0
  },
  "output_tokens": 4791,
  "output_tokens_details": {
    "reasoning_tokens": 2176
  },
  "total_tokens": 11166
}

    PROMPT:
    
You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

ITERATION 5 FEEDBACK AND IMPROVEMENT REQUEST:
You are now working on iteration 5. Based on the previous iteration results and code, please improve the implementation.

PREVIOUS RESULTS:
- Success: True
- Error Message: 

ERRORS ENCOUNTERED:
Game Test Results for Iteration 4 - 2025-08-09 18:50:46
============================================================

No errors detected during game test.

CONTAINER LOGS:
--------------------
Test Client Logs:



POKER CLIENT LOGS:
--------------------
Poker Client Log: No critical errors detected in poker client logs



Please fix these specific errors in your implementation.

GAME PERFORMANCE DATA:

YOUR BOT PLAYER IDS: [2098415801]
When analyzing the game data below, focus on these player IDs as they represent YOUR bot's performance.


YOUR BOT PERFORMANCE SUMMARY (across 10 games):
- Average Game Score (Delta per Game): -8.00
- Total Game Score: -80.00
- Total Games Played: 10

Performance Analysis:
- Positive scores indicate profit per game
- Negative scores indicate losses per game
- Focus on improving average game score for better performance

[
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10010,
      "2098415801": 9990
    },
    "finalDelta": {
      "2918973677": 10,
      "2098415801": -10
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Td",
      "9h",
      "4c",
      "6c"
    ],
    "playerHands": {
      "2918973676": [
        "Kc",
        "3c"
      ],
      "2098415800": [
        "Ac",
        "Qh"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9990,
      "finalDelta": -10,
      "gameScore": -10
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10080,
      "2098415801": 9920
    },
    "finalDelta": {
      "2918973677": 80,
      "2098415801": -80
    },
    "gameScores": {
      "2918973677": 5,
      "2098415801": -5
    },
    "rounds": 1,
    "finalBoard": [
      "2c",
      "5s",
      "9h"
    ],
    "playerHands": {
      "2918973676": [
        "3d",
        "3s"
      ],
      "2098415800": [
        "4d",
        "6h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9920,
      "finalDelta": -80,
      "gameScore": -5
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10015,
      "2098415801": 9985
    },
    "finalDelta": {
      "2918973677": 15,
      "2098415801": -15
    },
    "gameScores": {
      "2918973677": 5,
      "2098415801": -5
    },
    "rounds": 1,
    "finalBoard": [
      "3c",
      "7s",
      "5d"
    ],
    "playerHands": {
      "2918973676": [
        "Td",
        "2h"
      ],
      "2098415800": [
        "4s",
        "8c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9985,
      "finalDelta": -15,
      "gameScore": -5
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10025,
      "2098415801": 9975
    },
    "finalDelta": {
      "2918973677": 25,
      "2098415801": -25
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Jd",
      "Kh",
      "Kd",
      "3s"
    ],
    "playerHands": {
      "2918973676": [
        "Jh",
        "8d"
      ],
      "2098415800": [
        "Kc",
        "6h"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9975,
      "finalDelta": -25,
      "gameScore": -10
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10030,
      "2098415801": 9970
    },
    "finalDelta": {
      "2918973677": 30,
      "2098415801": -30
    },
    "gameScores": {
      "2918973677": 5,
      "2098415801": -5
    },
    "rounds": 1,
    "finalBoard": [
      "9h",
      "3s",
      "Th"
    ],
    "playerHands": {
      "2918973676": [
        "Jd",
        "6c"
      ],
      "2098415800": [
        "4c",
        "Kc"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9970,
      "finalDelta": -30,
      "gameScore": -5
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10040,
      "2098415801": 9960
    },
    "finalDelta": {
      "2918973677": 40,
      "2098415801": -40
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Jh",
      "6c",
      "5s",
      "Kh"
    ],
    "playerHands": {
      "2918973676": [
        "6d",
        "8h"
      ],
      "2098415800": [
        "Tc",
        "8d"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9960,
      "finalDelta": -40,
      "gameScore": -10
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10045,
      "2098415801": 9955
    },
    "finalDelta": {
      "2918973677": 45,
      "2098415801": -45
    },
    "gameScores": {
      "2918973677": 5,
      "2098415801": -5
    },
    "rounds": 1,
    "finalBoard": [
      "4d",
      "Ks",
      "3c"
    ],
    "playerHands": {
      "2918973676": [
        "As",
        "5h"
      ],
      "2098415800": [
        "7c",
        "5c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9955,
      "finalDelta": -45,
      "gameScore": -5
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10055,
      "2098415801": 9945
    },
    "finalDelta": {
      "2918973677": 55,
      "2098415801": -55
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "2d",
      "Jc",
      "9c",
      "6h"
    ],
    "playerHands": {
      "2918973676": [
        "3h",
        "Th"
      ],
      "2098415800": [
        "Jh",
        "5s"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9945,
      "finalDelta": -55,
      "gameScore": -10
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10065,
      "2098415801": 9935
    },
    "finalDelta": {
      "2918973677": 65,
      "2098415801": -65
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "Qc",
      "7d",
      "6c",
      "Ac"
    ],
    "playerHands": {
      "2918973676": [
        "5h",
        "Ks"
      ],
      "2098415800": [
        "Kd",
        "Jc"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9935,
      "finalDelta": -65,
      "gameScore": -10
    }
  },
  {
    "gameId": "94cbedb6-d5b7-4177-b161-ecb96b48c63b",
    "players": {
      "default": 2918973677,
      "client_container_6027_test_client_test_openai_o3_pro_iter_4_20250809_185029_iter4": 2098415801
    },
    "playerNames": {
      "2918973676": "player2918973677",
      "2098415800": "player2098415801"
    },
    "finalMoney": {
      "2918973677": 10075,
      "2098415801": 9925
    },
    "finalDelta": {
      "2918973677": 75,
      "2098415801": -75
    },
    "gameScores": {
      "2918973677": 10,
      "2098415801": -10
    },
    "rounds": 2,
    "finalBoard": [
      "5d",
      "Th",
      "Qs",
      "6d"
    ],
    "playerHands": {
      "2918973676": [
        "Ac",
        "4s"
      ],
      "2098415800": [
        "Tc",
        "7c"
      ]
    },
    "blinds": {
      "small": 5,
      "big": 10
    },
    "botPlayerId": 2098415801,
    "botPerformance": {
      "finalMoney": 9925,
      "finalDelta": -75,
      "gameScore": -10
    }
  }
]

IMPORTANT: When analyzing the game performance data above, focus on the player ID that corresponds to YOUR bot implementation.
Look for your bot's performance in the 'gameScores' field, which shows the delta gain/loss for each individual game.

PERFORMANCE METRICS EXPLANATION:
- 'gameScores': Shows the profit/loss for each individual game (this is what matters most)
- Positive gameScore = Profit in that game
- Negative gameScore = Loss in that game
- Focus on improving your strategy to achieve positive gameScores consistently

Please analyze YOUR bot's gameScore performance and improve the strategy based on these results.

POKER CLIENT ERRORS:
No critical errors detected in poker client logs

Please investigate these errors in your poker client logs and fix any issues in your implementation.

IMPROVEMENT INSTRUCTIONS:
1. You are on iteration 5 - build upon the previous code
2. Analyze the errors and game performance data above
3. Fix any syntax, import, or runtime errors from the previous iteration
4. Improve the poker strategy based on game results
5. Ensure the code follows the exact template requirements
6. Return the improved implementation in the same format (Python code block + requirements.txt block)

Focus on making the bot more competitive and error-free. You can see exactly what was wrong with the previous version and should fix those specific issues.


    RESPONSE:
    ```python
from __future__ import annotations

import random
from typing import Dict, List, Tuple

from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient


# ----------  Helper utilities ---------- #
RANK_CHAR_TO_INT = {
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    "T": 10,
    "J": 11,
    "Q": 12,
    "K": 13,
    "A": 14,
}


def card_to_rank(card: str) -> int:
    """Return numerical rank from a card string such as 'Ah'."""
    return RANK_CHAR_TO_INT[card[0]]


def is_suited(card1: str, card2: str) -> bool:
    return card1[1] == card2[1]


def classify_preflop(hand: Tuple[str, str]) -> int:
    """
    Return a numeric strength category for a starting hand.
    3 – premium, 2 – strong, 1 – medium, 0 – weak
    """
    c1, c2 = hand
    r1, r2 = card_to_rank(c1), card_to_rank(c2)
    suited = is_suited(c1, c2)

    # pairs
    if r1 == r2:
        if r1 >= 10:  # TT+
            return 3
        elif 8 <= r1 <= 9:  # 88/99
            return 2
        elif 6 <= r1 <= 7:  # 66/77
            return 1
        else:
            return 0

    high = max(r1, r2)
    low = min(r1, r2)

    # suited big cards
    if suited:
        if {high, low} == {14, 13}:  # AKs
            return 3
        if high == 14 and low >= 11:  # AQ/AJ suited
            return 2
        if (high == 13 and low >= 11) or (high == 12 and low >= 11):  # KQ/QJ/JT suited
            return 1
        if high >= 11 and low >= 9:  # broadway suited connectors
            return 1

    # offsuit big combos
    if not suited:
        if {high, low} == {14, 13}:  # AKo
            return 2
        if high == 14 and low >= 12:  # AQo+
            return 1
        if high == 13 and low >= 12:  # KQo
            return 1

    # suited connectors 65s+
    if suited and high - low == 1 and low >= 6:
        return 1

    return 0


def evaluate_simple_postflop(hole: Tuple[str, str], community: List[str]) -> int:
    """
    Extremely light-weight post-flop evaluator.

    0 – nothing
    1 – one pair
    2 – two pair / trips or better (considered strong)
    """
    cards = list(hole) + community
    ranks = [card_to_rank(c) for c in cards]
    counts: Dict[int, int] = {}
    for r in ranks:
        counts[r] = counts.get(r, 0) + 1

    max_same = max(counts.values())
    if max_same >= 3:
        return 2  # trips or better
    if max_same == 2:
        # Check how many different ranks make pairs
        pairs = sum(1 for v in counts.values() if v == 2)
        if pairs >= 2:
            return 2  # two pair
        return 1  # single pair

    # draw detection can be added; keep simple for robustness
    return 0


# ----------  Bot implementation ---------- #
class SimplePlayer(Bot):
    """
    A light-weight rule-based bot.
    """

    def __init__(self):
        super().__init__()
        self.big_blind: int = 0
        self.small_blind: int = 0
        self.hole_cards: Tuple[str, str] | None = None
        self.last_round_num: int | None = None

    # ----------  Framework hooks ---------- #
    def on_start(
        self,
        starting_chips: int,
        player_hands: List[str],
        blind_amount: int,
        big_blind_player_id: int,
        small_blind_player_id: int,
        all_players: List[int],
    ):
        # In the framework, `blind_amount` represents the big blind.
        self.big_blind = blind_amount
        self.small_blind = blind_amount // 2 if blind_amount > 1 else 1
        # Store initial hole cards if provided
        if player_hands and len(player_hands) >= 2:
            self.hole_cards = (player_hands[0], player_hands[1])

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        """
        Expect the engine to refresh the player's hole cards inside `round_state`
        (commonly via an extra field). We extract defensively.
        """
        self.last_round_num = round_state.round_num
        self._update_hole_cards_from_state(round_state)

    def get_action(
        self, round_state: RoundStateClient, remaining_chips: int
    ) -> Tuple[PokerAction, int]:
        """
        Core decision logic. Always returns a valid action/amount pair.
        """
        # Defensive – ensure we always have our current hole cards.
        self._update_hole_cards_from_state(round_state)
        if not self.hole_cards:
            # If for some reason cards missing – fold to stay safe.
            return PokerAction.FOLD, 0

        my_bet = round_state.player_bets.get(str(self.id), 0)
        to_call = max(0, round_state.current_bet - my_bet)
        pot = max(1, round_state.pot)  # avoid /0

        # ---- Pre-flop decision ---- #
        if round_state.round.lower() == "preflop":
            strength = classify_preflop(self.hole_cards)

            # Case 1 – nothing to call
            if to_call == 0:
                if strength >= 2:
                    # Open raise 3×BB or minimum raise
                    raise_size = max(round_state.min_raise, 3 * self.big_blind)
                    raise_size = min(raise_size, round_state.max_raise, remaining_chips)
                    if raise_size >= round_state.min_raise:
                        return PokerAction.RAISE, raise_size
                # Otherwise limp/check
                return PokerAction.CHECK, 0

            # Case 2 – facing a raise
            else:
                # Pot odds check – call small raises with decent hands
                if strength == 3:
                    # Occasionally 3-bet / shove
                    if random.random() < 0.4 and remaining_chips > 0:
                        raise_size = min(
                            max(round_state.min_raise, to_call * 3),
                            remaining_chips,
                            round_state.max_raise,
                        )
                        if raise_size >= round_state.min_raise:
                            return PokerAction.RAISE, raise_size
                    # Else just call
                    return PokerAction.CALL, 0

                if strength == 2 and to_call <= 4 * self.big_blind:
                    return PokerAction.CALL, 0

                if strength == 1 and to_call <= 2 * self.big_blind:
                    return PokerAction.CALL, 0

                return PokerAction.FOLD, 0

        # ---- Post-flop decision ---- #
        made_value = evaluate_simple_postflop(self.hole_cards, round_state.community_cards)

        # No bet to us
        if to_call == 0:
            if made_value >= 2:
                # Strong hand – value bet about 60% pot
                bet_amount = int(pot * 0.6)
                bet_amount = max(round_state.min_raise, bet_amount)
                bet_amount = min(bet_amount, remaining_chips, round_state.max_raise)
                if bet_amount >= round_state.min_raise:
                    return PokerAction.RAISE, bet_amount
                return PokerAction.CHECK, 0

            if made_value == 1:
                # Medium strength – small bet 30 % pot with some frequency
                if random.random() < 0.5:
                    bet_amount = int(pot * 0.3)
                    bet_amount = max(round_state.min_raise, bet_amount)
                    bet_amount = min(bet_amount, remaining_chips, round_state.max_raise)
                    if bet_amount >= round_state.min_raise:
                        return PokerAction.RAISE, bet_amount
                return PokerAction.CHECK, 0

            # Nothing – just check
            return PokerAction.CHECK, 0

        # There is a wager to us
        else:
            if made_value >= 2:
                # Strong – raise or call
                if random.random() < 0.5:
                    raise_amt = max(round_state.min_raise, to_call * 2)
                    raise_amt = min(raise_amt, remaining_chips, round_state.max_raise)
                    if raise_amt >= round_state.min_raise:
                        return PokerAction.RAISE, raise_amt
                return PokerAction.CALL, 0

            if made_value == 1:
                # Call small bets, fold large ones
                if to_call <= pot * 0.4 or to_call <= self.big_blind * 4:
                    return PokerAction.CALL, 0
                return PokerAction.FOLD, 0

            # Bluff occasionally if cheap
            if to_call <= self.big_blind and random.random() < 0.1:
                raise_amt = max(round_state.min_raise, to_call * 3)
                raise_amt = min(raise_amt, remaining_chips, round_state.max_raise)
                if raise_amt >= round_state.min_raise:
                    return PokerAction.RAISE, raise_amt

            return PokerAction.FOLD, 0

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        # Clear hole cards for the next round
        self.hole_cards = None

    def on_end_game(
        self,
        round_state: RoundStateClient,
        player_score: float,
        all_scores: dict,
        active_players_hands: dict,
    ):
        # Nothing to persist between games for this simple bot
        pass

    # ----------  Internal helpers ---------- #
    def _update_hole_cards_from_state(self, round_state: RoundStateClient):
        """
        Extracts hole cards from any plausible attribute within the round_state.
        Different engines sometimes expose them differently, so we attempt a few
        common patterns but always fail-safe.
        """
        if hasattr(round_state, "player_hands"):
            ph = getattr(round_state, "player_hands")
            if isinstance(ph, dict):
                cards = ph.get(str(self.id)) or ph.get(self.id)
                if cards and len(cards) >= 2:
                    self.hole_cards = (cards[0], cards[1])
            elif isinstance(ph, list) and len(ph) >= 2:
                # Heads-up convenience
                self.hole_cards = (ph[0], ph[1])

        # Some engines use "hole_cards"
        if self.hole_cards is None and hasattr(round_state, "hole_cards"):
            hc = getattr(round_state, "hole_cards")
            if isinstance(hc, dict):
                cards = hc.get(str(self.id)) or hc.get(self.id)
                if cards and len(cards) >= 2:
                    self.hole_cards = (cards[0], cards[1])
            elif isinstance(hc, list) and len(hc) >= 2:
                self.hole_cards = (hc[0], hc[1])
```

```text
```

    RAW API RESPONSE:
    {
  "choices": [
    {
      "message": {
        "content": "```python\nfrom __future__ import annotations\n\nimport random\nfrom typing import Dict, List, Tuple\n\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\n\n\n# ----------  Helper utilities ---------- #\nRANK_CHAR_TO_INT = {\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    \"T\": 10,\n    \"J\": 11,\n    \"Q\": 12,\n    \"K\": 13,\n    \"A\": 14,\n}\n\n\ndef card_to_rank(card: str) -> int:\n    \"\"\"Return numerical rank from a card string such as 'Ah'.\"\"\"\n    return RANK_CHAR_TO_INT[card[0]]\n\n\ndef is_suited(card1: str, card2: str) -> bool:\n    return card1[1] == card2[1]\n\n\ndef classify_preflop(hand: Tuple[str, str]) -> int:\n    \"\"\"\n    Return a numeric strength category for a starting hand.\n    3 \u2013 premium, 2 \u2013 strong, 1 \u2013 medium, 0 \u2013 weak\n    \"\"\"\n    c1, c2 = hand\n    r1, r2 = card_to_rank(c1), card_to_rank(c2)\n    suited = is_suited(c1, c2)\n\n    # pairs\n    if r1 == r2:\n        if r1 >= 10:  # TT+\n            return 3\n        elif 8 <= r1 <= 9:  # 88/99\n            return 2\n        elif 6 <= r1 <= 7:  # 66/77\n            return 1\n        else:\n            return 0\n\n    high = max(r1, r2)\n    low = min(r1, r2)\n\n    # suited big cards\n    if suited:\n        if {high, low} == {14, 13}:  # AKs\n            return 3\n        if high == 14 and low >= 11:  # AQ/AJ suited\n            return 2\n        if (high == 13 and low >= 11) or (high == 12 and low >= 11):  # KQ/QJ/JT suited\n            return 1\n        if high >= 11 and low >= 9:  # broadway suited connectors\n            return 1\n\n    # offsuit big combos\n    if not suited:\n        if {high, low} == {14, 13}:  # AKo\n            return 2\n        if high == 14 and low >= 12:  # AQo+\n            return 1\n        if high == 13 and low >= 12:  # KQo\n            return 1\n\n    # suited connectors 65s+\n    if suited and high - low == 1 and low >= 6:\n        return 1\n\n    return 0\n\n\ndef evaluate_simple_postflop(hole: Tuple[str, str], community: List[str]) -> int:\n    \"\"\"\n    Extremely light-weight post-flop evaluator.\n\n    0 \u2013 nothing\n    1 \u2013 one pair\n    2 \u2013 two pair / trips or better (considered strong)\n    \"\"\"\n    cards = list(hole) + community\n    ranks = [card_to_rank(c) for c in cards]\n    counts: Dict[int, int] = {}\n    for r in ranks:\n        counts[r] = counts.get(r, 0) + 1\n\n    max_same = max(counts.values())\n    if max_same >= 3:\n        return 2  # trips or better\n    if max_same == 2:\n        # Check how many different ranks make pairs\n        pairs = sum(1 for v in counts.values() if v == 2)\n        if pairs >= 2:\n            return 2  # two pair\n        return 1  # single pair\n\n    # draw detection can be added; keep simple for robustness\n    return 0\n\n\n# ----------  Bot implementation ---------- #\nclass SimplePlayer(Bot):\n    \"\"\"\n    A light-weight rule-based bot.\n    \"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.big_blind: int = 0\n        self.small_blind: int = 0\n        self.hole_cards: Tuple[str, str] | None = None\n        self.last_round_num: int | None = None\n\n    # ----------  Framework hooks ---------- #\n    def on_start(\n        self,\n        starting_chips: int,\n        player_hands: List[str],\n        blind_amount: int,\n        big_blind_player_id: int,\n        small_blind_player_id: int,\n        all_players: List[int],\n    ):\n        # In the framework, `blind_amount` represents the big blind.\n        self.big_blind = blind_amount\n        self.small_blind = blind_amount // 2 if blind_amount > 1 else 1\n        # Store initial hole cards if provided\n        if player_hands and len(player_hands) >= 2:\n            self.hole_cards = (player_hands[0], player_hands[1])\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        \"\"\"\n        Expect the engine to refresh the player's hole cards inside `round_state`\n        (commonly via an extra field). We extract defensively.\n        \"\"\"\n        self.last_round_num = round_state.round_num\n        self._update_hole_cards_from_state(round_state)\n\n    def get_action(\n        self, round_state: RoundStateClient, remaining_chips: int\n    ) -> Tuple[PokerAction, int]:\n        \"\"\"\n        Core decision logic. Always returns a valid action/amount pair.\n        \"\"\"\n        # Defensive \u2013 ensure we always have our current hole cards.\n        self._update_hole_cards_from_state(round_state)\n        if not self.hole_cards:\n            # If for some reason cards missing \u2013 fold to stay safe.\n            return PokerAction.FOLD, 0\n\n        my_bet = round_state.player_bets.get(str(self.id), 0)\n        to_call = max(0, round_state.current_bet - my_bet)\n        pot = max(1, round_state.pot)  # avoid /0\n\n        # ---- Pre-flop decision ---- #\n        if round_state.round.lower() == \"preflop\":\n            strength = classify_preflop(self.hole_cards)\n\n            # Case 1 \u2013 nothing to call\n            if to_call == 0:\n                if strength >= 2:\n                    # Open raise 3\u00d7BB or minimum raise\n                    raise_size = max(round_state.min_raise, 3 * self.big_blind)\n                    raise_size = min(raise_size, round_state.max_raise, remaining_chips)\n                    if raise_size >= round_state.min_raise:\n                        return PokerAction.RAISE, raise_size\n                # Otherwise limp/check\n                return PokerAction.CHECK, 0\n\n            # Case 2 \u2013 facing a raise\n            else:\n                # Pot odds check \u2013 call small raises with decent hands\n                if strength == 3:\n                    # Occasionally 3-bet / shove\n                    if random.random() < 0.4 and remaining_chips > 0:\n                        raise_size = min(\n                            max(round_state.min_raise, to_call * 3),\n                            remaining_chips,\n                            round_state.max_raise,\n                        )\n                        if raise_size >= round_state.min_raise:\n                            return PokerAction.RAISE, raise_size\n                    # Else just call\n                    return PokerAction.CALL, 0\n\n                if strength == 2 and to_call <= 4 * self.big_blind:\n                    return PokerAction.CALL, 0\n\n                if strength == 1 and to_call <= 2 * self.big_blind:\n                    return PokerAction.CALL, 0\n\n                return PokerAction.FOLD, 0\n\n        # ---- Post-flop decision ---- #\n        made_value = evaluate_simple_postflop(self.hole_cards, round_state.community_cards)\n\n        # No bet to us\n        if to_call == 0:\n            if made_value >= 2:\n                # Strong hand \u2013 value bet about 60% pot\n                bet_amount = int(pot * 0.6)\n                bet_amount = max(round_state.min_raise, bet_amount)\n                bet_amount = min(bet_amount, remaining_chips, round_state.max_raise)\n                if bet_amount >= round_state.min_raise:\n                    return PokerAction.RAISE, bet_amount\n                return PokerAction.CHECK, 0\n\n            if made_value == 1:\n                # Medium strength \u2013 small bet 30 % pot with some frequency\n                if random.random() < 0.5:\n                    bet_amount = int(pot * 0.3)\n                    bet_amount = max(round_state.min_raise, bet_amount)\n                    bet_amount = min(bet_amount, remaining_chips, round_state.max_raise)\n                    if bet_amount >= round_state.min_raise:\n                        return PokerAction.RAISE, bet_amount\n                return PokerAction.CHECK, 0\n\n            # Nothing \u2013 just check\n            return PokerAction.CHECK, 0\n\n        # There is a wager to us\n        else:\n            if made_value >= 2:\n                # Strong \u2013 raise or call\n                if random.random() < 0.5:\n                    raise_amt = max(round_state.min_raise, to_call * 2)\n                    raise_amt = min(raise_amt, remaining_chips, round_state.max_raise)\n                    if raise_amt >= round_state.min_raise:\n                        return PokerAction.RAISE, raise_amt\n                return PokerAction.CALL, 0\n\n            if made_value == 1:\n                # Call small bets, fold large ones\n                if to_call <= pot * 0.4 or to_call <= self.big_blind * 4:\n                    return PokerAction.CALL, 0\n                return PokerAction.FOLD, 0\n\n            # Bluff occasionally if cheap\n            if to_call <= self.big_blind and random.random() < 0.1:\n                raise_amt = max(round_state.min_raise, to_call * 3)\n                raise_amt = min(raise_amt, remaining_chips, round_state.max_raise)\n                if raise_amt >= round_state.min_raise:\n                    return PokerAction.RAISE, raise_amt\n\n            return PokerAction.FOLD, 0\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        # Clear hole cards for the next round\n        self.hole_cards = None\n\n    def on_end_game(\n        self,\n        round_state: RoundStateClient,\n        player_score: float,\n        all_scores: dict,\n        active_players_hands: dict,\n    ):\n        # Nothing to persist between games for this simple bot\n        pass\n\n    # ----------  Internal helpers ---------- #\n    def _update_hole_cards_from_state(self, round_state: RoundStateClient):\n        \"\"\"\n        Extracts hole cards from any plausible attribute within the round_state.\n        Different engines sometimes expose them differently, so we attempt a few\n        common patterns but always fail-safe.\n        \"\"\"\n        if hasattr(round_state, \"player_hands\"):\n            ph = getattr(round_state, \"player_hands\")\n            if isinstance(ph, dict):\n                cards = ph.get(str(self.id)) or ph.get(self.id)\n                if cards and len(cards) >= 2:\n                    self.hole_cards = (cards[0], cards[1])\n            elif isinstance(ph, list) and len(ph) >= 2:\n                # Heads-up convenience\n                self.hole_cards = (ph[0], ph[1])\n\n        # Some engines use \"hole_cards\"\n        if self.hole_cards is None and hasattr(round_state, \"hole_cards\"):\n            hc = getattr(round_state, \"hole_cards\")\n            if isinstance(hc, dict):\n                cards = hc.get(str(self.id)) or hc.get(self.id)\n                if cards and len(cards) >= 2:\n                    self.hole_cards = (cards[0], cards[1])\n            elif isinstance(hc, list) and len(hc) >= 2:\n                self.hole_cards = (hc[0], hc[1])\n```\n\n```text\n```",
        "role": "assistant"
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "input_tokens": 6375,
    "input_tokens_details": {
      "cached_tokens": 0
    },
    "output_tokens": 4791,
    "output_tokens_details": {
      "reasoning_tokens": 2176
    },
    "total_tokens": 11166
  },
  "model": "o3-pro-2025-06-10",
  "id": "resp_6897fb1893608192ba97eb8a13dd97d80a18be9a0c13c104",
  "object": "chat.completion",
  "reasoning": {
    "id": "rs_6897fb79f6bc81928808cbc9efc70ccd0a18be9a0c13c104",
    "type": "reasoning",
    "summary": []
  }
}
    ================================================================================
    