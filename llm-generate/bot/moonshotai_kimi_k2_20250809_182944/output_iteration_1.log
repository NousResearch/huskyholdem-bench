
================================================================================
TIMESTAMP: 2025-08-09 18:32:39
MODEL: moonshotai/kimi-k2
PROMPT LENGTH: 9908 characters
RESPONSE LENGTH: 13269 characters
USAGE: {
  "prompt_tokens": 2317,
  "completion_tokens": 3198,
  "total_tokens": 5515
}

PROMPT:
You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

RESPONSE:
```python
from typing import List, Tuple, Dict, Any
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
import random
import math

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.starting_chips = 10000
        self.current_hand = []
        self.community_cards = []
        self.opponent_stats = {}
        self.position = None
        self.blind_amount = 0
        self.tight_aggressive = True
        self.stage_adjustments = {
            'Preflop': 1.0,
            'Flop': 1.2,
            'Turn': 1.3,
            'River': 1.4
        }
        
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.blind_amount = blind_amount
        self.current_hand = player_hands
        for player_id in all_players:
            if player_id != self.id:
                self.opponent_stats[player_id] = {
                    'hands_played': 0,
                    'hands_raised': 0,
                    'hands_aggressive': 0,
                    'total_contribution': 0
                }
    
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        self.current_round = round_state
        self.community_cards = round_state.community_cards
        
    def _calculate_hand_strength(self):
        """Calculate relative hand strength"""
        if not self.community_cards:
            return self._preflop_strength()
        else:
            return self._postflop_strength()
    
    def _preflop_strength(self):
        """Evaluate preflop hand strength"""
        card1, card2 = self.current_hand
        rank1, suit1 = card1[0], card1[1]
        rank2, suit2 = card2[0], card2[1]
        
        ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,
                '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}
        
        rank_val1 = ranks[rank1]
        rank_val2 = ranks[rank2]
        
        is_pocket_pair = rank_val1 == rank_val2
        is_suited = suit1 == suit2
        high_card = max(rank_val1, rank_val2)
        low_card = min(rank_val1, rank_val2)
        
        # Premium hands
        if (high_card >= 10 and is_pocket_pair) or (high_card == 14 and low_card >= 10):
            return 0.9
        elif (high_card >= 10 and is_suited) or (is_pocket_pair and high_card >= 7):
            return 0.75
        elif (high_card >= 11) or (high_card >= 9 and is_suited):
            return 0.6
        elif high_card >= 9 or (high_card >= 8 and is_suited):
            return 0.45
        else:
            return 0.3
    
    def _postflop_strength(self):
        """Evaluate postflop hand strength based on board texture"""
        from itertools import combinations
        
        all_cards = self.current_hand + self.community_cards
        rank_map = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,
                   '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}
        
        def evaluate_7_cards(cards):
            ranks = [rank_map[card[0]] for card in cards]
            suits = [card[1] for card in cards]
            
            # Check flush
            from collections import Counter
            suit_counts = Counter(suits)
            flush_suit = None
            for suit, count in suit_counts.items():
                if count >= 5:
                    flush_suit = suit
                    break
            
            all_seven = list(zip(ranks, suits))
            
            # Check straight flush/straight/flush
            if flush_suit:
                flush_cards = [r for r, s in all_seven if s == flush_suit]
                flush_cards = list(set(flush_cards))
                flush_cards.sort(reverse=True)
                
                for i in range(len(flush_cards) - 4):
                    if len(flush_cards) >= 5 and max(flush_cards[i:i+5]) - min(flush_cards[i:i+5]) == 4:
                        return 8 + max(flush_cards[i:i+5]) / 14.0
                
                # Check for A-2-3-4-5 straight
                if 14 in flush_cards and sum(1 for r in range(2, 6) if r in flush_cards) == 4:
                    return 8 + 5 / 14.0
            
            # Check quads
            rank_counts = Counter(ranks)
            quads = [r for r, count in rank_counts.items() if count >= 4]
            if quads:
                kicker = max([r for r in ranks if r != quads[0]], default=2)
                return 7 + quads[0]/14.0 + kicker/(14*14)
            
            # Check full house
            trips = sorted([r for r, count in rank_counts.items() if count == 3], reverse=True)
            pairs = sorted([r for r, count in rank_counts.items() if count == 2], reverse=True)
            if trips and pairs:
                return 6 + trips[0]/14.0 + pairs[0]/(14*14)
            elif len(trips) >= 2:
                return 6 + trips[0]/14.0 + trips[1]/(14*14)
            
            # Check flush
            if flush_suit:
                flush_ranks = flush_cards[:5]
                value = 5
                for i, r in enumerate(flush_ranks):
                    value += r / (14 ** (i + 1))
                return value
            
            # Check straight
            unique_ranks = sorted(set(ranks), reverse=True)
            straight_high = 0
            for i in range(len(unique_ranks) - 4):
                if unique_ranks[i] - unique_ranks[i+4] == 4:
                    straight_high = unique_ranks[i]
                    break
            
            if not straight_high and 14 in unique_ranks:
                if all(r in unique_ranks for r in range(2, 6)):
                    straight_high = 5
            
            if straight_high:
                return 4 + straight_high/14.0
            
            # Check trips
            if trips:
                kickers = sorted([r for r in ranks if r != trips[0]], reverse=True)[:2]
                value = 3 + trips[0]/14.0
                for i, k in enumerate(kickers):
                    value += k / (14 ** (i + 2))
                return value
            
            # Check two pair
            if len(pairs) >= 2:
                high_pair, low_pair = pairs[0], pairs[1]
                kicker = max([r for r in ranks if r not in {high_pair, low_pair}])
                return 2 + high_pair/14.0 + low_pair/(14*14) + kicker/(14*14*14)
            elif len(pairs) == 1:
                kickers = sorted([r for r in ranks if r != pairs[0]], reverse=True)[:3]
                value = 1 + pairs[0]/14.0
                for i, k in enumerate(kickers):
                    value += k / (14 ** (i + 2))
                return value
            else:
                # High card
                high_cards = sorted(ranks, reverse=True)[:5]
                value = 0
                for i, r in enumerate(high_cards):
                    value += r / (14 ** (i + 1))
                return value
        
        best_rank = 0
        for combo in combinations(all_cards, 5):
            rank = evaluate_7_cards(all_cards)
            if rank > best_rank:
                best_rank = rank
        
        # Normalize relative to possible hand strength range
        return min(max(best_rank / 9.0, 0), 1)
    
    def _calculate_pot_odds(self, round_state: RoundStateClient, remaining_chips: int):
        """Calculate pot odds to determine if calling is profitable"""
        if round_state.current_bet <= 0:
            return 1.0
            
        to_call = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)
        if to_call <= 0:
            return 1.0
            
        pot_odds = to_call / (round_state.pot + to_call)
        return pot_odds
    
    def _adjust_for_position(self, round_state: RoundStateClient):
        """Adjust aggression based on position"""
        player_count = len(round_state.current_player)
        if player_count <= 2:
            # Heads-up play
            return 1.3
        else:
            # Multi-way pot
            return 0.9
    
    def _opponent_tendencies(self, round_state: RoundStateClient):
        """Adjust based on opponent play history"""
        if not self.opponent_stats:
            return 1.0
            
        tightness = 1.0
        for player_id, stats in self.opponent_stats.items():
            if stats['hands_played'] > 0:
                vpip = stats['hands_played'] / max(stats['total_contribution'], 1)
                if vpip > 0.3:
                    tightness = 0.8
                else:
                    tightness = 1.2
        return tightness
    
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        hand_strength = self._calculate_hand_strength()
        pot_odds = self._calculate_pot_odds(round_state, remaining_chips)
        position_factor = self._adjust_for_position(round_state)
        opponent_factor = self._opponent_tendencies(round_state)
        
        stage_adjustment = self.stage_adjustments.get(round_state.round, 1.0)
        
        # Calculate adjusted strength
        adjusted_strength = hand_strength * stage_adjustment * position_factor * opponent_factor
        
        to_call = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)
        
        # Decision logic
        if adjusted_strength > 0.8:
            # Very strong hand
            if to_call <= 0:
                if remaining_chips > round_state.min_raise:
                    raise_amount = min(round_state.pot * 0.8, round_state.max_raise)
                    if raise_amount >= round_state.min_raise:
                        return (PokerAction.RAISE, int(raise_amount))
                return (PokerAction.CHECK, 0)
            else:
                if adjusted_strength * remaining_chips > to_call * 1.5:
                    if remaining_chips > round_state.min_raise:
                        raise_amount = min(round_state.pot * 0.9, round_state.max_raise)
                        if raise_amount >= round_state.min_raise:
                            return (PokerAction.RAISE, int(raise_amount))
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.CALL, 0)
                    
        elif adjusted_strength > 0.6:
            # Strong hand
            if to_call <= 0:
                if remaining_chips > round_state.min_raise and random.random() < 0.7:
                    raise_amount = min(round_state.pot * 0.5, round_state.max_raise)
                    if raise_amount >= round_state.min_raise:
                        return (PokerAction.RAISE, int(raise_amount))
                return (PokerAction.CHECK, 0)
            else:
                if pot_odds < adjusted_strength * 1.2:
                    if remaining_chips > round_state.min_raise and adjusted_strength > 0.7:
                        raise_amount = min(max(to_call * 2, round_state.pot * 0.6), round_state.max_raise)
                        if raise_amount >= round_state.min_raise:
                            return (PokerAction.RAISE, int(raise_amount))
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.FOLD, 0)
                    
        elif adjusted_strength > 0.4:
            # Marginal hand
            if to_call <= 0:
                return (PokerAction.CHECK, 0)
            else:
                if pot_odds < adjusted_strength:
                    return (PokerAction.CALL, 0)
                else:
                    return (PokerAction.FOLD, 0)
        else:
            # Weak hand
            if to_call <= 0:
                return (PokerAction.CHECK, 0)
            else:
                # Semi-bluff with very small chance
                if random.random() < 0.05 and remaining_chips > round_state.min_raise:
                    raise_amount = min(round_state.pot * 0.8, round_state.max_raise)
                    if raise_amount >= round_state.min_raise:
                        return (PokerAction.RAISE, int(raise_amount))
                return (PokerAction.FOLD, 0)
    
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        # Update opponent tracking
        for player_id, action in round_state.player_actions.items():
            if player_id == str(self.id):
                continue
            
            pid = int(player_id)
            if pid in self.opponent_stats:
                stats = self.opponent_stats[pid]
                stats['total_contribution'] += 1
                
                if 'Call' in action or 'Raise' in action or 'Check' in action:
                    stats['hands_played'] += 1
                    if 'Raise' in action or 'All_in' in action:
                        stats['hands_raised'] += 1
                        stats['hands_aggressive'] += 1
    
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # Reset tracking for new game
        self.opponent_stats.clear()
```

```text

```

RAW API RESPONSE:
{
  "id": "gen-1754789384-dGf6mFCZksBiYcRz4kpy",
  "provider": "Moonshot AI",
  "model": "moonshotai/kimi-k2",
  "object": "chat.completion",
  "created": 1754789384,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "stop",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple, Dict, Any\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nimport random\nimport math\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.starting_chips = 10000\n        self.current_hand = []\n        self.community_cards = []\n        self.opponent_stats = {}\n        self.position = None\n        self.blind_amount = 0\n        self.tight_aggressive = True\n        self.stage_adjustments = {\n            'Preflop': 1.0,\n            'Flop': 1.2,\n            'Turn': 1.3,\n            'River': 1.4\n        }\n        \n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.blind_amount = blind_amount\n        self.current_hand = player_hands\n        for player_id in all_players:\n            if player_id != self.id:\n                self.opponent_stats[player_id] = {\n                    'hands_played': 0,\n                    'hands_raised': 0,\n                    'hands_aggressive': 0,\n                    'total_contribution': 0\n                }\n    \n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        self.current_round = round_state\n        self.community_cards = round_state.community_cards\n        \n    def _calculate_hand_strength(self):\n        \"\"\"Calculate relative hand strength\"\"\"\n        if not self.community_cards:\n            return self._preflop_strength()\n        else:\n            return self._postflop_strength()\n    \n    def _preflop_strength(self):\n        \"\"\"Evaluate preflop hand strength\"\"\"\n        card1, card2 = self.current_hand\n        rank1, suit1 = card1[0], card1[1]\n        rank2, suit2 = card2[0], card2[1]\n        \n        ranks = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n                '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        \n        rank_val1 = ranks[rank1]\n        rank_val2 = ranks[rank2]\n        \n        is_pocket_pair = rank_val1 == rank_val2\n        is_suited = suit1 == suit2\n        high_card = max(rank_val1, rank_val2)\n        low_card = min(rank_val1, rank_val2)\n        \n        # Premium hands\n        if (high_card >= 10 and is_pocket_pair) or (high_card == 14 and low_card >= 10):\n            return 0.9\n        elif (high_card >= 10 and is_suited) or (is_pocket_pair and high_card >= 7):\n            return 0.75\n        elif (high_card >= 11) or (high_card >= 9 and is_suited):\n            return 0.6\n        elif high_card >= 9 or (high_card >= 8 and is_suited):\n            return 0.45\n        else:\n            return 0.3\n    \n    def _postflop_strength(self):\n        \"\"\"Evaluate postflop hand strength based on board texture\"\"\"\n        from itertools import combinations\n        \n        all_cards = self.current_hand + self.community_cards\n        rank_map = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n                   '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        \n        def evaluate_7_cards(cards):\n            ranks = [rank_map[card[0]] for card in cards]\n            suits = [card[1] for card in cards]\n            \n            # Check flush\n            from collections import Counter\n            suit_counts = Counter(suits)\n            flush_suit = None\n            for suit, count in suit_counts.items():\n                if count >= 5:\n                    flush_suit = suit\n                    break\n            \n            all_seven = list(zip(ranks, suits))\n            \n            # Check straight flush/straight/flush\n            if flush_suit:\n                flush_cards = [r for r, s in all_seven if s == flush_suit]\n                flush_cards = list(set(flush_cards))\n                flush_cards.sort(reverse=True)\n                \n                for i in range(len(flush_cards) - 4):\n                    if len(flush_cards) >= 5 and max(flush_cards[i:i+5]) - min(flush_cards[i:i+5]) == 4:\n                        return 8 + max(flush_cards[i:i+5]) / 14.0\n                \n                # Check for A-2-3-4-5 straight\n                if 14 in flush_cards and sum(1 for r in range(2, 6) if r in flush_cards) == 4:\n                    return 8 + 5 / 14.0\n            \n            # Check quads\n            rank_counts = Counter(ranks)\n            quads = [r for r, count in rank_counts.items() if count >= 4]\n            if quads:\n                kicker = max([r for r in ranks if r != quads[0]], default=2)\n                return 7 + quads[0]/14.0 + kicker/(14*14)\n            \n            # Check full house\n            trips = sorted([r for r, count in rank_counts.items() if count == 3], reverse=True)\n            pairs = sorted([r for r, count in rank_counts.items() if count == 2], reverse=True)\n            if trips and pairs:\n                return 6 + trips[0]/14.0 + pairs[0]/(14*14)\n            elif len(trips) >= 2:\n                return 6 + trips[0]/14.0 + trips[1]/(14*14)\n            \n            # Check flush\n            if flush_suit:\n                flush_ranks = flush_cards[:5]\n                value = 5\n                for i, r in enumerate(flush_ranks):\n                    value += r / (14 ** (i + 1))\n                return value\n            \n            # Check straight\n            unique_ranks = sorted(set(ranks), reverse=True)\n            straight_high = 0\n            for i in range(len(unique_ranks) - 4):\n                if unique_ranks[i] - unique_ranks[i+4] == 4:\n                    straight_high = unique_ranks[i]\n                    break\n            \n            if not straight_high and 14 in unique_ranks:\n                if all(r in unique_ranks for r in range(2, 6)):\n                    straight_high = 5\n            \n            if straight_high:\n                return 4 + straight_high/14.0\n            \n            # Check trips\n            if trips:\n                kickers = sorted([r for r in ranks if r != trips[0]], reverse=True)[:2]\n                value = 3 + trips[0]/14.0\n                for i, k in enumerate(kickers):\n                    value += k / (14 ** (i + 2))\n                return value\n            \n            # Check two pair\n            if len(pairs) >= 2:\n                high_pair, low_pair = pairs[0], pairs[1]\n                kicker = max([r for r in ranks if r not in {high_pair, low_pair}])\n                return 2 + high_pair/14.0 + low_pair/(14*14) + kicker/(14*14*14)\n            elif len(pairs) == 1:\n                kickers = sorted([r for r in ranks if r != pairs[0]], reverse=True)[:3]\n                value = 1 + pairs[0]/14.0\n                for i, k in enumerate(kickers):\n                    value += k / (14 ** (i + 2))\n                return value\n            else:\n                # High card\n                high_cards = sorted(ranks, reverse=True)[:5]\n                value = 0\n                for i, r in enumerate(high_cards):\n                    value += r / (14 ** (i + 1))\n                return value\n        \n        best_rank = 0\n        for combo in combinations(all_cards, 5):\n            rank = evaluate_7_cards(all_cards)\n            if rank > best_rank:\n                best_rank = rank\n        \n        # Normalize relative to possible hand strength range\n        return min(max(best_rank / 9.0, 0), 1)\n    \n    def _calculate_pot_odds(self, round_state: RoundStateClient, remaining_chips: int):\n        \"\"\"Calculate pot odds to determine if calling is profitable\"\"\"\n        if round_state.current_bet <= 0:\n            return 1.0\n            \n        to_call = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)\n        if to_call <= 0:\n            return 1.0\n            \n        pot_odds = to_call / (round_state.pot + to_call)\n        return pot_odds\n    \n    def _adjust_for_position(self, round_state: RoundStateClient):\n        \"\"\"Adjust aggression based on position\"\"\"\n        player_count = len(round_state.current_player)\n        if player_count <= 2:\n            # Heads-up play\n            return 1.3\n        else:\n            # Multi-way pot\n            return 0.9\n    \n    def _opponent_tendencies(self, round_state: RoundStateClient):\n        \"\"\"Adjust based on opponent play history\"\"\"\n        if not self.opponent_stats:\n            return 1.0\n            \n        tightness = 1.0\n        for player_id, stats in self.opponent_stats.items():\n            if stats['hands_played'] > 0:\n                vpip = stats['hands_played'] / max(stats['total_contribution'], 1)\n                if vpip > 0.3:\n                    tightness = 0.8\n                else:\n                    tightness = 1.2\n        return tightness\n    \n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        hand_strength = self._calculate_hand_strength()\n        pot_odds = self._calculate_pot_odds(round_state, remaining_chips)\n        position_factor = self._adjust_for_position(round_state)\n        opponent_factor = self._opponent_tendencies(round_state)\n        \n        stage_adjustment = self.stage_adjustments.get(round_state.round, 1.0)\n        \n        # Calculate adjusted strength\n        adjusted_strength = hand_strength * stage_adjustment * position_factor * opponent_factor\n        \n        to_call = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)\n        \n        # Decision logic\n        if adjusted_strength > 0.8:\n            # Very strong hand\n            if to_call <= 0:\n                if remaining_chips > round_state.min_raise:\n                    raise_amount = min(round_state.pot * 0.8, round_state.max_raise)\n                    if raise_amount >= round_state.min_raise:\n                        return (PokerAction.RAISE, int(raise_amount))\n                return (PokerAction.CHECK, 0)\n            else:\n                if adjusted_strength * remaining_chips > to_call * 1.5:\n                    if remaining_chips > round_state.min_raise:\n                        raise_amount = min(round_state.pot * 0.9, round_state.max_raise)\n                        if raise_amount >= round_state.min_raise:\n                            return (PokerAction.RAISE, int(raise_amount))\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.CALL, 0)\n                    \n        elif adjusted_strength > 0.6:\n            # Strong hand\n            if to_call <= 0:\n                if remaining_chips > round_state.min_raise and random.random() < 0.7:\n                    raise_amount = min(round_state.pot * 0.5, round_state.max_raise)\n                    if raise_amount >= round_state.min_raise:\n                        return (PokerAction.RAISE, int(raise_amount))\n                return (PokerAction.CHECK, 0)\n            else:\n                if pot_odds < adjusted_strength * 1.2:\n                    if remaining_chips > round_state.min_raise and adjusted_strength > 0.7:\n                        raise_amount = min(max(to_call * 2, round_state.pot * 0.6), round_state.max_raise)\n                        if raise_amount >= round_state.min_raise:\n                            return (PokerAction.RAISE, int(raise_amount))\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n                    \n        elif adjusted_strength > 0.4:\n            # Marginal hand\n            if to_call <= 0:\n                return (PokerAction.CHECK, 0)\n            else:\n                if pot_odds < adjusted_strength:\n                    return (PokerAction.CALL, 0)\n                else:\n                    return (PokerAction.FOLD, 0)\n        else:\n            # Weak hand\n            if to_call <= 0:\n                return (PokerAction.CHECK, 0)\n            else:\n                # Semi-bluff with very small chance\n                if random.random() < 0.05 and remaining_chips > round_state.min_raise:\n                    raise_amount = min(round_state.pot * 0.8, round_state.max_raise)\n                    if raise_amount >= round_state.min_raise:\n                        return (PokerAction.RAISE, int(raise_amount))\n                return (PokerAction.FOLD, 0)\n    \n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        # Update opponent tracking\n        for player_id, action in round_state.player_actions.items():\n            if player_id == str(self.id):\n                continue\n            \n            pid = int(player_id)\n            if pid in self.opponent_stats:\n                stats = self.opponent_stats[pid]\n                stats['total_contribution'] += 1\n                \n                if 'Call' in action or 'Raise' in action or 'Check' in action:\n                    stats['hands_played'] += 1\n                    if 'Raise' in action or 'All_in' in action:\n                        stats['hands_raised'] += 1\n                        stats['hands_aggressive'] += 1\n    \n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        # Reset tracking for new game\n        self.opponent_stats.clear()\n```\n\n```text\n\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "system_fingerprint": "fpv0_a5c14cfb",
  "usage": {
    "prompt_tokens": 2317,
    "completion_tokens": 3198,
    "total_tokens": 5515
  }
}
================================================================================
