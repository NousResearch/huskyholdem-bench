
================================================================================
TIMESTAMP: 2025-08-09 18:24:57
MODEL: google/gemini-2.5-flash
PROMPT LENGTH: 9908 characters
RESPONSE LENGTH: 6919 characters
USAGE: {
  "prompt_tokens": 2551,
  "completion_tokens": 1989,
  "total_tokens": 4540
}

PROMPT:
You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

RESPONSE:
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
from enum import Enum

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.hole_cards = []
        self.starting_chips = 0
        self.player_id = None
        self.blind_amount = 0
        self.all_players = []
        self.num_players = 0

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.hole_cards = player_hands
        self.blind_amount = blind_amount
        self.all_players = all_players
        self.num_players = len(all_players)

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        self.hole_cards = round_state.player_hands.get(str(self.id), []) if hasattr(round_state, 'player_hands') else []


    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        current_bet_to_match = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)
        
        # Determine hand strength (very basic for this example)
        # This is a placeholder; a real bot would use a complex hand evaluator
        hand_strength = self._evaluate_hand_strength(self.hole_cards, round_state.community_cards)

        # Basic strategy based on hand strength and round
        if round_state.round == 'Preflop':
            if hand_strength >= 0.8: # Very strong hands (AA, KK, AKs, etc.)
                return self._ aggressive_action(round_state, remaining_chips, current_bet_to_match)
            elif hand_strength >= 0.5: # Medium strong hands (suited connectors, pocket pairs, etc.)
                if current_bet_to_match == 0:
                    return PokerAction.CHECK, 0
                elif current_bet_to_match <= self.blind_amount * 2: # Call small bets
                    return PokerAction.CALL, 0
                elif current_bet_to_match <= self.blind_amount * 4 and remaining_chips > current_bet_to_match:
                    return PokerAction.CALL, 0
                else: # Fold against large pre-flop raises
                    return PokerAction.FOLD, 0
            else: # Weak hands
                if current_bet_to_match == 0:
                    return PokerAction.CHECK, 0
                else:
                    return PokerAction.FOLD, 0
        else: # Post-flop rounds (Flop, Turn, River)
            if hand_strength >= 0.9: # Very strong hands (made straights, flushes, trips, etc.)
                return self._ aggressive_action(round_state, remaining_chips, current_bet_to_match)
            elif hand_strength >= 0.7: # Strong hands (top pair, two pair)
                if current_bet_to_match == 0:
                    return PokerAction.CHECK, 0
                else: # Call or small raise
                    if remaining_chips > current_bet_to_match:
                        return PokerAction.CALL, 0
                    else:
                        return PokerAction.ALL_IN, 0
            elif hand_strength >= 0.4: # Medium hands (middle pair, draws)
                if current_bet_to_match == 0:
                    return PokerAction.CHECK, 0
                elif current_bet_to_match < remaining_chips / 4: # Call if bet is small relative to stack
                    return PokerAction.CALL, 0
                else:
                    return PokerAction.FOLD, 0
            else: # Weak hands
                if current_bet_to_match == 0:
                    return PokerAction.CHECK, 0
                else:
                    return PokerAction.FOLD, 0

    def _aggressive_action(self, round_state: RoundStateClient, remaining_chips: int, current_bet_to_match: int) -> Tuple[PokerAction, int]:
        min_raise_amount = max(round_state.min_raise, current_bet_to_match + self.blind_amount * 2)

        if min_raise_amount <= remaining_chips:
            action_amount = min(min_raise_amount, remaining_chips)
            if action_amount == remaining_chips:
                return PokerAction.ALL_IN, 0
            return PokerAction.RAISE, action_amount
        elif current_bet_to_match <= remaining_chips:
            return PokerAction.CALL, 0
        else:
            return PokerAction.ALL_IN, 0

    def _evaluate_hand_strength(self, hole_cards: List[str], community_cards: List[str]) -> float:
        """
        A very simplified hand strength evaluator.
        This needs to be replaced with a proper poker hand evaluator for competition.
        For now, it's just a placeholder, relying on hole cards.
        """
        if not hole_cards or len(hole_cards) < 2:
            return 0.0

        card_ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
        suits = ['c', 'd', 'h', 's']

        # Extract ranks and suits from hole cards
        rank1 = hole_cards[0][0]
        suit1 = hole_cards[0][1]
        rank2 = hole_cards[1][0]
        suit2 = hole_cards[1][1]

        # Convert to numerical ranks for comparison
        num_rank1 = card_ranks.index(rank1)
        num_rank2 = card_ranks.index(rank2)

        # Pair check
        if rank1 == rank2:
            if rank1 in ['A', 'K']: return 0.9 # AA, KK
            if rank1 in ['Q', 'J', 'T']: return 0.8 # QQ, JJ, TT
            return 0.7 # Other pairs
        
        # Suited connectors/Broadway
        if suit1 == suit2:
            # Suited Broadway (AKs, AQs, KQs, etc.)
            if (num_rank1 >= card_ranks.index('T') and num_rank2 >= card_ranks.index('T')) or \
               (num_rank1 == card_ranks.index('A') and num_rank2 >= card_ranks.index('T')) or \
               (num_rank2 == card_ranks.index('A') and num_rank1 >= card_ranks.index('T')):
                return 0.8
            # Suited connectors (JTs, T9s, etc.)
            if abs(num_rank1 - num_rank2) <= 4: # Gap of at most 3 for suited connectors
                return 0.6
        
        # Unsuited Broadway
        if (num_rank1 >= card_ranks.index('T') and num_rank2 >= card_ranks.index('T')) or \
           (num_rank1 == card_ranks.index('A') and num_rank2 >= card_ranks.index('T')) or \
           (num_rank2 == card_ranks.index('A') and num_rank1 >= card_ranks.index('T')):
            return 0.7

        # High cards
        if num_rank1 >= card_ranks.index('Q') or num_rank2 >= card_ranks.index('Q'):
            return 0.5

        # Other hands
        return 0.3

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        pass

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        pass
```

```text

```

RAW API RESPONSE:
{
  "id": "gen-1754789090-4eJ7lDrp8CsdpEqS5SHW",
  "provider": "Google",
  "model": "google/gemini-2.5-flash",
  "object": "chat.completion",
  "created": 1754789090,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "STOP",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nfrom typing import List, Tuple\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nfrom enum import Enum\n\nclass PokerRound(Enum):\n    PREFLOP = 0\n    FLOP = 1\n    TURN = 2\n    RIVER = 3\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.hole_cards = []\n        self.starting_chips = 0\n        self.player_id = None\n        self.blind_amount = 0\n        self.all_players = []\n        self.num_players = 0\n\n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.hole_cards = player_hands\n        self.blind_amount = blind_amount\n        self.all_players = all_players\n        self.num_players = len(all_players)\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        self.hole_cards = round_state.player_hands.get(str(self.id), []) if hasattr(round_state, 'player_hands') else []\n\n\n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        current_bet_to_match = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)\n        \n        # Determine hand strength (very basic for this example)\n        # This is a placeholder; a real bot would use a complex hand evaluator\n        hand_strength = self._evaluate_hand_strength(self.hole_cards, round_state.community_cards)\n\n        # Basic strategy based on hand strength and round\n        if round_state.round == 'Preflop':\n            if hand_strength >= 0.8: # Very strong hands (AA, KK, AKs, etc.)\n                return self._ aggressive_action(round_state, remaining_chips, current_bet_to_match)\n            elif hand_strength >= 0.5: # Medium strong hands (suited connectors, pocket pairs, etc.)\n                if current_bet_to_match == 0:\n                    return PokerAction.CHECK, 0\n                elif current_bet_to_match <= self.blind_amount * 2: # Call small bets\n                    return PokerAction.CALL, 0\n                elif current_bet_to_match <= self.blind_amount * 4 and remaining_chips > current_bet_to_match:\n                    return PokerAction.CALL, 0\n                else: # Fold against large pre-flop raises\n                    return PokerAction.FOLD, 0\n            else: # Weak hands\n                if current_bet_to_match == 0:\n                    return PokerAction.CHECK, 0\n                else:\n                    return PokerAction.FOLD, 0\n        else: # Post-flop rounds (Flop, Turn, River)\n            if hand_strength >= 0.9: # Very strong hands (made straights, flushes, trips, etc.)\n                return self._ aggressive_action(round_state, remaining_chips, current_bet_to_match)\n            elif hand_strength >= 0.7: # Strong hands (top pair, two pair)\n                if current_bet_to_match == 0:\n                    return PokerAction.CHECK, 0\n                else: # Call or small raise\n                    if remaining_chips > current_bet_to_match:\n                        return PokerAction.CALL, 0\n                    else:\n                        return PokerAction.ALL_IN, 0\n            elif hand_strength >= 0.4: # Medium hands (middle pair, draws)\n                if current_bet_to_match == 0:\n                    return PokerAction.CHECK, 0\n                elif current_bet_to_match < remaining_chips / 4: # Call if bet is small relative to stack\n                    return PokerAction.CALL, 0\n                else:\n                    return PokerAction.FOLD, 0\n            else: # Weak hands\n                if current_bet_to_match == 0:\n                    return PokerAction.CHECK, 0\n                else:\n                    return PokerAction.FOLD, 0\n\n    def _aggressive_action(self, round_state: RoundStateClient, remaining_chips: int, current_bet_to_match: int) -> Tuple[PokerAction, int]:\n        min_raise_amount = max(round_state.min_raise, current_bet_to_match + self.blind_amount * 2)\n\n        if min_raise_amount <= remaining_chips:\n            action_amount = min(min_raise_amount, remaining_chips)\n            if action_amount == remaining_chips:\n                return PokerAction.ALL_IN, 0\n            return PokerAction.RAISE, action_amount\n        elif current_bet_to_match <= remaining_chips:\n            return PokerAction.CALL, 0\n        else:\n            return PokerAction.ALL_IN, 0\n\n    def _evaluate_hand_strength(self, hole_cards: List[str], community_cards: List[str]) -> float:\n        \"\"\"\n        A very simplified hand strength evaluator.\n        This needs to be replaced with a proper poker hand evaluator for competition.\n        For now, it's just a placeholder, relying on hole cards.\n        \"\"\"\n        if not hole_cards or len(hole_cards) < 2:\n            return 0.0\n\n        card_ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n        suits = ['c', 'd', 'h', 's']\n\n        # Extract ranks and suits from hole cards\n        rank1 = hole_cards[0][0]\n        suit1 = hole_cards[0][1]\n        rank2 = hole_cards[1][0]\n        suit2 = hole_cards[1][1]\n\n        # Convert to numerical ranks for comparison\n        num_rank1 = card_ranks.index(rank1)\n        num_rank2 = card_ranks.index(rank2)\n\n        # Pair check\n        if rank1 == rank2:\n            if rank1 in ['A', 'K']: return 0.9 # AA, KK\n            if rank1 in ['Q', 'J', 'T']: return 0.8 # QQ, JJ, TT\n            return 0.7 # Other pairs\n        \n        # Suited connectors/Broadway\n        if suit1 == suit2:\n            # Suited Broadway (AKs, AQs, KQs, etc.)\n            if (num_rank1 >= card_ranks.index('T') and num_rank2 >= card_ranks.index('T')) or \\\n               (num_rank1 == card_ranks.index('A') and num_rank2 >= card_ranks.index('T')) or \\\n               (num_rank2 == card_ranks.index('A') and num_rank1 >= card_ranks.index('T')):\n                return 0.8\n            # Suited connectors (JTs, T9s, etc.)\n            if abs(num_rank1 - num_rank2) <= 4: # Gap of at most 3 for suited connectors\n                return 0.6\n        \n        # Unsuited Broadway\n        if (num_rank1 >= card_ranks.index('T') and num_rank2 >= card_ranks.index('T')) or \\\n           (num_rank1 == card_ranks.index('A') and num_rank2 >= card_ranks.index('T')) or \\\n           (num_rank2 == card_ranks.index('A') and num_rank1 >= card_ranks.index('T')):\n            return 0.7\n\n        # High cards\n        if num_rank1 >= card_ranks.index('Q') or num_rank2 >= card_ranks.index('Q'):\n            return 0.5\n\n        # Other hands\n        return 0.3\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        pass\n\n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        pass\n```\n\n```text\n\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 2551,
    "completion_tokens": 1989,
    "total_tokens": 4540
  }
}
================================================================================
