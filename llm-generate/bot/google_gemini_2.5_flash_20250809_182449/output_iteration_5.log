
================================================================================
TIMESTAMP: 2025-08-09 18:28:55
MODEL: google/gemini-2.5-flash
PROMPT LENGTH: 11127 characters
RESPONSE LENGTH: 10068 characters
USAGE: {
  "prompt_tokens": 2858,
  "completion_tokens": 3002,
  "total_tokens": 5860
}

PROMPT:

You are tasked with submitting a poker bot to a No-Limit Texas Hold'em poker bot competition: Husky Hold'em.

**Detailed Game Rules**
- No-Limit Texas Hold'em with 2-10 players (often 6-handed tables); bots compete in heads-up or multi-player matches hosted by a central game server.
- Players start with $10,000 chips at the simulation start; simulations run for n games (more than 10 per run); blinds rotate and increase every n games (e.g., after certain rounds); big/small blinds are posted pre-flop.
- Goal: Maximize delta money (ending chips minus starting chips); if a player runs out of chips, they are eliminated from that table; no rebuys.
- Each hand has 4 betting rounds: Pre-flop (after hole cards and blinds), Flop (3 community cards), Turn (1 community card), River (1 community card).
- Actions: Fold, Check, Call, Raise (any amount up to stack, no limit), All-in.
- Hand rankings: Royal flush > Straight flush > Four of a kind > Full house > Flush > Straight > Three of a kind > Two pair > One pair > High card.
- Showdown: If multiple players remain after river betting, best 5-card hand (using any combination of 2 hole cards + 5 community cards) wins the pot; side pots form for all-ins with eligible players.
- Technical Limits: 30 seconds max per move (timeout causes automatic fold); 100MB max memory usage; any error/exception causes automatic fold; all bots are given the same compute limits.

Your task: Implement winning bot in player.py by subclassing Bot as in the template below and follow the above game rules.

Bot Design and Competition Rules:

1. Your bot must subclass Bot as SimplePlayer, implementing all required methods exactly as in the template. Preserve the class name SimplePlayer for compatibility with the game server. The template for the class is as
**SimplePlayer Template:**
```python
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        # TODO implement this

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        # TODO implement this

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # TODO implement this

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Returns the action for the player. """
        # TODO implement this

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        """ Called at the end of the round. """
        # TODO implement this

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # TODO implement this
```
2. DO NOT rename or remove any predefined methods (on_start, on_round_start, get_action, on_end_round, on_end_game), and do not change their signatures.
3. You may add helper functions and instance variables for strategy or tracking.
4. Your bot should be able to abide by no limit texas hold'em rules and handle side pots, all-ins, blind increases, multi-way pots, and be error-free (no exceptions).
5. For each action, always return valid actions:
    - For RAISE: the amount raise combine with your current bet must be larger than the the current raise.
    - For CALL: You don't need to specify the amount you call, it default to match exactly the amount needed to call (current_bet - your bet).
    - For CHECK: You can't check if round's current bet is larger than 0. Resort to other action (eg CALL, RAISE, ALL_IN).
    - For ALL_IN: You don't need to specify the amount you all in, it will default to all your current money.
    - **INVALID ACTION WILL MAKE YOU LOSE MONEY (automatic result in fold if the condition is not match for each action), so logic must always check bounds and edge cases**.
6. If you use any external libraries, they must be listed in requirements.txt (pure Python only).
7. Implement your bot with SimplePlayer. See full RoundStateClient, PokerAction, and PokerRound definitions below.
8. Your bot should maximize delta money (ending chips minus starting chips). Positive mean gaining money, the more money you gain the better.
9. There might will be data on previous run (error and game score) if this is not the first time you implement. If there is error, fix it so your bot can run. Try to improve your bot from previous round.
10. If there are no usage of external requirements, the text secion for requirement must be empty. DO NOT PUT ANYTHING ELSE. If you want to use any external library, you must put it in that text block
11. Your response must consist ONLY of two files: the complete player.py (as a Python code block) implementing the bot with all template elements preserved plus your improvements, and requirements.txt (as a text block) listing any dependencies (pure Python only, e.g., numpy if needed for calculations). Do not include any other text, explanations, or outputs. See example response below:
Example response:
```python
<Your python code>
```

```text
numpy
matplotlib
<any external library you want to use, put it here>
...
```
12. Your implementation MUST BE IN FULL not putting stub method or guideline. Everything in SimplePlayer must be ready to the detail and ready to run.
13. When you do division, make sure to make it prone to error divide by zero by adding some small delta.
14. The pool of submitted bots, including your bot, will be organized into 6-handed poker tables where every possible combination of 6 bots forms a separate table. Each table will play exactly 1,000 hands, with chip stacks carrying over between hands within the same table. 
15. At the end of each table, delta money is calculated for each bot using the formula: final chip count minus 10,000 (initial chip amount). Your bot's total tournament score is determined by summing its delta money across all tables it participates in. The bot with the highest cumulative delta money across all tables wins the tournament.
16. Your bot will undergo iterative testing across 5 rounds, where each round involves playing 10 hands of heads-up poker against a house bot. After each round, you will receive either the complete game log showing performance results or any compilation/simulation errors that occurred while attempting to run your bot. Use this feedback to refine your implementation in subsequent iterations.

**References**

**RoundStateClient Full Definition:**
```python
from dataclasses import dataclass
from typing import Dict, List, Any

@dataclass
class RoundStateClient:
    round_num: int # The number of the current round
    round: str # e.g., 'Preflop', 'Flop', 'Turn', 'River'
    community_cards: List[str] # List of community cards, e.g., ['Ah', 'Ks', '3d']
    pot: int # The total pot
    current_player: List[int] # The ids of the current players
    current_bet: int # The current bet (need to match round's current bet minus your current bet if you want to call)
    min_raise: int  # Minimum raise amount
    max_raise: int  # Maximum raise amount (your remaining chips)
    player_bets: Dict[str, int]  # Bets by player ID
    player_actions: Dict[str, str]  # Actions by player ID, e.g., {'3336760419': 'Check', '3266396022': 'Check'}
    side_pots: list[Dict[str, any]] = None  # List of dicts with 'amount' and 'eligible_players' keys

    @classmethod
    def from_message(cls, message: Dict[str, Any]) -> 'RoundStateClient':
        """Create RoundStateClient from a message dictionary"""
        return cls(
            round_num=message['round_num'],
            round=message['round'],
            community_cards=message['community_cards'],
            pot=message['pot'],
            current_player=message['current_player'],
            current_bet=message['current_bet'],
            min_raise=message['min_raise'],
            max_raise=message['max_raise'],
            player_bets=message['player_bets'],
            player_actions=message['player_actions'],
            side_pots=message.get('side_pots', [])
        )
```

**PokerAction and PokerRound Enums:**
```python
from enum import Enum

class PokerAction(Enum):
    FOLD = 1
    CHECK = 2
    CALL = 3
    RAISE = 4
    ALL_IN = 5

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3
```

**Bot abstract class:**
```python
from abc import ABC, abstractmethod
from typing import List, Tuple

from type.round_state import RoundStateClient
from type.poker_action import PokerAction

class Bot(ABC):
    def __init__(self) -> None:
        """ Initializes the player. """
        self.id = None
        pass

    def set_id(self, player_id: int) -> None:
        """ Sets the player ID. """
        self.id = player_id

    @abstractmethod
    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]) -> None:
        """ Called when the game starts. """
        pass

    @abstractmethod
    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the start of each round. """
        pass

    @abstractmethod
    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        """ Called when it is the player's turn to act. """
        pass

    @abstractmethod
    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int) -> None:
        """ Called at the end of each round. """
        pass

    @abstractmethod
    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict) -> None:
        """ Called at the end of the game. """
        pass
```

ITERATION 5 FEEDBACK AND IMPROVEMENT REQUEST:
You are now working on iteration 5. Based on the previous iteration results and code, please improve the implementation.

PREVIOUS RESULTS:
- Success: False
- Error Message: Critical errors in game testing

ERRORS ENCOUNTERED:
[2025-08-09 18:28:10] Code validation failed: Validation error: Traceback (most recent call last):
  File "/app/play_script.py", line 70, in <module>
    main()
  File "/app/play_script.py", line 54, in main
    _ , _ = p.get_action(round_state, 990)
ValueError: too many values to unpack (expected 2)



Please fix these specific errors in your implementation.

IMPROVEMENT INSTRUCTIONS:
1. You are on iteration 5 - build upon the previous code
2. Analyze the errors and game performance data above
3. Fix any syntax, import, or runtime errors from the previous iteration
4. Improve the poker strategy based on game results
5. Ensure the code follows the exact template requirements
6. Return the improved implementation in the same format (Python code block + requirements.txt block)

Focus on making the bot more competitive and error-free. You can see exactly what was wrong with the previous version and should fix those specific issues.


RESPONSE:
```python
import random
from typing import List, Tuple
from bot import Bot
from type.poker_action import PokerAction
from type.round_state import RoundStateClient
from enum import Enum

class PokerRound(Enum):
    PREFLOP = 0
    FLOP = 1
    TURN = 2
    RIVER = 3

class SimplePlayer(Bot):
    def __init__(self):
        super().__init__()
        self.starting_chips = 0
        self.player_hands = []
        self.blind_amount = 0
        self.big_blind_player_id = -1
        self.small_blind_player_id = -1
        self.all_players = []
        self.id = -1 # My player ID
        self.hand_strength_preflop = {}
        self._initialize_hand_strength()

    def _initialize_hand_strength(self):
        # Assign arbitrary strength values for pre-flop hands. This is a very basic model.
        # Strong pairs
        pairs = ['AA', 'KK', 'QQ', 'JJ', 'TT']
        # Suited connectors/high cards
        suited_connectors = ['AKs', 'AQs', 'AJs', 'ATs', 'KQs', 'KJs', 'QTs']
        # Off-suit high cards
        offsuit_high = ['AKo', 'AQo', 'AJo', 'KQo']

        for hand in pairs:
            self.hand_strength_preflop[hand] = 0.9 + random.uniform(-0.05, 0.05)
        for hand in suited_connectors:
            self.hand_strength_preflop[hand] = 0.7 + random.uniform(-0.05, 0.05)
        for hand in offsuit_high:
            self.hand_strength_preflop[hand] = 0.6 + random.uniform(-0.05, 0.05)

        # General approach for other hands: random value, weak.
        # This needs to be more sophisticated with actual pre-flop hand rankings.
        # For simplicity, we just generate random low values for unspecified hands
        # based on card ranks and whether they are suited/connected.
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']
        for i in range(len(ranks)):
            for j in range(i, len(ranks)):
                r1 = ranks[i]
                r2 = ranks[j]
                if r1 == r2: # Pair
                    if r1 + r2 not in self.hand_strength_preflop:
                        self.hand_strength_preflop[r1 + r2] = 0.5 + random.uniform(-0.05, 0.05)
                else: # Non-pair
                    suited_hand = r1 + r2 + 's'
                    offsuit_hand = r1 + r2 + 'o'
                    if suited_hand not in self.hand_strength_preflop:
                        self.hand_strength_preflop[suited_hand] = 0.4 + random.uniform(-0.05, 0.05)
                    if offsuit_hand not in self.hand_strength_preflop:
                        self.hand_strength_preflop[offsuit_hand] = 0.3 + random.uniform(-0.05, 0.05)

    def _get_hand_key(self, cards: List[str]) -> str:
        if not cards or len(cards) != 2:
            return "UNKNOWN"
        c1_rank = cards[0][0]
        c1_suit = cards[0][1]
        c2_rank = cards[1][0]
        c2_suit = cards[1][1]

        # Ensure consistent order for pairs and non-pairs (e.g., AK not KA)
        ranks_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}
        if ranks_order[c1_rank] < ranks_order[c2_rank]:
            c1_rank, c2_rank = c2_rank, c1_rank

        if c1_rank == c2_rank:
            return c1_rank + c2_rank
        elif c1_suit == c2_suit:
            return c1_rank + c2_rank + 's'
        else:
            return c1_rank + c2_rank + 'o'

    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):
        self.starting_chips = starting_chips
        self.player_hands = player_hands
        self.blind_amount = blind_amount
        self.big_blind_player_id = big_blind_player_id
        self.small_blind_player_id = small_blind_player_id
        self.all_players = all_players
        self.id = self.all_players[0] # Assuming my ID is the first one in all_players for now, needs to be set externally or by the system caller. This is not a reliable way to set self.id

    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):
        # Reset any round-specific state
        pass

    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:
        my_hand_key = self._get_hand_key(self.player_hands)
        hand_strength = self.hand_strength_preflop.get(my_hand_key, 0.2) # Default to a weak hand if not specified

        current_bet_to_match = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)
        
        # Determine if I am big blind or small blind and what the initial bet is
        is_big_blind = (self.id == self.big_blind_player_id)
        is_small_blind = (self.id == self.small_blind_player_id)
        
        # Simple strategy based on hand strength and betting round
        # Pre-flop strategy
        if round_state.round == 'Preflop':
            # Aggressive hands: AA, KK, QQ, AKs, AQs
            if hand_strength >= 0.8:
                if current_bet_to_match == 0: # Can check
                    return PokerAction.RAISE, min(remaining_chips, self.blind_amount * 3)
                elif current_bet_to_match < remaining_chips * 0.2: # Small bet
                    return PokerAction.RAISE, min(remaining_chips, current_bet_to_match * 2 + self.blind_amount) # Aggressive raise
                elif current_bet_to_match >= remaining_chips * 0.2 and current_bet_to_match < remaining_chips:
                    return PokerAction.CALL, 0
                else: # Bet is too high to call, but we have strong hand, so all-in
                    return PokerAction.ALL_IN, 0
            # Medium hands: JJ, TT, AJs, KQs, AKo, AQo, suited connectors
            elif 0.5 <= hand_strength < 0.8:
                if current_bet_to_match == 0:
                    return PokerAction.RAISE, min(remaining_chips, self.blind_amount * 2)
                elif current_bet_to_match <= self.blind_amount * 2: # Call if not too expensive
                    return PokerAction.CALL, 0
                else: # Bet too high for medium hand
                    return PokerAction.FOLD, 0
            # Weak hands: anything else
            else:
                if current_bet_to_match == 0 and not is_big_blind and not is_small_blind: # Just check if possible and no blinds
                    return PokerAction.CHECK, 0
                elif current_bet_to_match == 0 and is_big_blind and round_state.player_bets.get(str(self.id), 0) == self.blind_amount * 2:
                    # If I'm BB and no one raised my blind, I can check.
                    return PokerAction.CHECK, 0
                elif current_bet_to_match <= self.blind_amount: # Call only if minimal cost (small blind or limped pot)
                    return PokerAction.CALL, 0
                else:
                    return PokerAction.FOLD, 0
        
        # Post-flop strategy (Flop, Turn, River) - very basic, just uses general aggressiveness
        # This part of the bot does not use community cards effectively nor calculate real equity
        # A more advanced bot would re-evaluate hand strength here.
        
        # Be more aggressive if pot is small (trying to steal) or large (committed)
        pot_size = round_state.pot if round_state.pot > 0 else 1 # Avoid division by zero
        aggressiveness_factor = min(1.0, remaining_chips / pot_size) # Adjust based on stack-to-pot ratio
        
        # Randomness to make it less predictable but within strategic boundaries
        r = random.random()

        if hand_strength >= 0.7: # Strong Hand (e.g., two pair, trips, straight, flush in simple terms)
            if current_bet_to_match == 0:
                # Bet roughly 50-70% of the pot
                bet_amount = int(0.5 * round_state.pot + round_state.pot * 0.2 * r)
                return PokerAction.RAISE, min(remaining_chips, max(round_state.min_raise, bet_amount))
            elif current_bet_to_match < remaining_chips * 0.3 * aggressiveness_factor:
                # Re-raise or call, lean towards raise
                if r < 0.7: # 70% chance to raise further
                    raise_amount = min(remaining_chips, max(round_state.min_raise * 2, current_bet_to_match * 2 + self.blind_amount))
                    return PokerAction.RAISE, raise_amount
                else:
                    return PokerAction.CALL, 0
            else:
                # Bet is too high or we're pushed, consider all-in
                if r < 0.5: # 50% chance to push all-in
                     return PokerAction.ALL_IN, 0
                else:
                     return PokerAction.FOLD, 0 # Sometimes fold strong to avoid tilting
        elif 0.4 <= hand_strength < 0.7: # Medium Hand (e.g., top pair, good kicker)
            if current_bet_to_match == 0:
                # Bet roughly 30-50% of the pot
                bet_amount = int(0.3 * round_state.pot + round_state.pot * 0.2 * r)
                return PokerAction.RAISE, min(remaining_chips, max(round_state.min_raise, bet_amount))
            elif current_bet_to_match < remaining_chips * 0.15 * aggressiveness_factor:
                return PokerAction.CALL, 0
            else:
                return PokerAction.FOLD, 0
        else: # Weak Hand (e.g., high card, weak pair)
            if current_bet_to_match == 0:
                return PokerAction.CHECK, 0
            elif current_bet_to_match < remaining_chips * 0.05 * aggressiveness_factor:
                # Call only if very cheap
                return PokerAction.CALL, 0
            else:
                return PokerAction.FOLD, 0
        
        # Fallback for safety (shouldn't be reached with proper logic)
        return PokerAction.FOLD, 0

    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):
        # Good place to log/analyze round results
        pass

    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):
        # Game finished, final cleanup or logging
        pass

```
```text
```

RAW API RESPONSE:
{
  "id": "gen-1754789321-rxeYSn7X8GekN1PFzqcE",
  "provider": "Google",
  "model": "google/gemini-2.5-flash",
  "object": "chat.completion",
  "created": 1754789321,
  "choices": [
    {
      "logprobs": null,
      "finish_reason": "stop",
      "native_finish_reason": "STOP",
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "```python\nimport random\nfrom typing import List, Tuple\nfrom bot import Bot\nfrom type.poker_action import PokerAction\nfrom type.round_state import RoundStateClient\nfrom enum import Enum\n\nclass PokerRound(Enum):\n    PREFLOP = 0\n    FLOP = 1\n    TURN = 2\n    RIVER = 3\n\nclass SimplePlayer(Bot):\n    def __init__(self):\n        super().__init__()\n        self.starting_chips = 0\n        self.player_hands = []\n        self.blind_amount = 0\n        self.big_blind_player_id = -1\n        self.small_blind_player_id = -1\n        self.all_players = []\n        self.id = -1 # My player ID\n        self.hand_strength_preflop = {}\n        self._initialize_hand_strength()\n\n    def _initialize_hand_strength(self):\n        # Assign arbitrary strength values for pre-flop hands. This is a very basic model.\n        # Strong pairs\n        pairs = ['AA', 'KK', 'QQ', 'JJ', 'TT']\n        # Suited connectors/high cards\n        suited_connectors = ['AKs', 'AQs', 'AJs', 'ATs', 'KQs', 'KJs', 'QTs']\n        # Off-suit high cards\n        offsuit_high = ['AKo', 'AQo', 'AJo', 'KQo']\n\n        for hand in pairs:\n            self.hand_strength_preflop[hand] = 0.9 + random.uniform(-0.05, 0.05)\n        for hand in suited_connectors:\n            self.hand_strength_preflop[hand] = 0.7 + random.uniform(-0.05, 0.05)\n        for hand in offsuit_high:\n            self.hand_strength_preflop[hand] = 0.6 + random.uniform(-0.05, 0.05)\n\n        # General approach for other hands: random value, weak.\n        # This needs to be more sophisticated with actual pre-flop hand rankings.\n        # For simplicity, we just generate random low values for unspecified hands\n        # based on card ranks and whether they are suited/connected.\n        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n        for i in range(len(ranks)):\n            for j in range(i, len(ranks)):\n                r1 = ranks[i]\n                r2 = ranks[j]\n                if r1 == r2: # Pair\n                    if r1 + r2 not in self.hand_strength_preflop:\n                        self.hand_strength_preflop[r1 + r2] = 0.5 + random.uniform(-0.05, 0.05)\n                else: # Non-pair\n                    suited_hand = r1 + r2 + 's'\n                    offsuit_hand = r1 + r2 + 'o'\n                    if suited_hand not in self.hand_strength_preflop:\n                        self.hand_strength_preflop[suited_hand] = 0.4 + random.uniform(-0.05, 0.05)\n                    if offsuit_hand not in self.hand_strength_preflop:\n                        self.hand_strength_preflop[offsuit_hand] = 0.3 + random.uniform(-0.05, 0.05)\n\n    def _get_hand_key(self, cards: List[str]) -> str:\n        if not cards or len(cards) != 2:\n            return \"UNKNOWN\"\n        c1_rank = cards[0][0]\n        c1_suit = cards[0][1]\n        c2_rank = cards[1][0]\n        c2_suit = cards[1][1]\n\n        # Ensure consistent order for pairs and non-pairs (e.g., AK not KA)\n        ranks_order = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'T': 10, 'J': 11, 'Q': 12, 'K': 13, 'A': 14}\n        if ranks_order[c1_rank] < ranks_order[c2_rank]:\n            c1_rank, c2_rank = c2_rank, c1_rank\n\n        if c1_rank == c2_rank:\n            return c1_rank + c2_rank\n        elif c1_suit == c2_suit:\n            return c1_rank + c2_rank + 's'\n        else:\n            return c1_rank + c2_rank + 'o'\n\n    def on_start(self, starting_chips: int, player_hands: List[str], blind_amount: int, big_blind_player_id: int, small_blind_player_id: int, all_players: List[int]):\n        self.starting_chips = starting_chips\n        self.player_hands = player_hands\n        self.blind_amount = blind_amount\n        self.big_blind_player_id = big_blind_player_id\n        self.small_blind_player_id = small_blind_player_id\n        self.all_players = all_players\n        self.id = self.all_players[0] # Assuming my ID is the first one in all_players for now, needs to be set externally or by the system caller. This is not a reliable way to set self.id\n\n    def on_round_start(self, round_state: RoundStateClient, remaining_chips: int):\n        # Reset any round-specific state\n        pass\n\n    def get_action(self, round_state: RoundStateClient, remaining_chips: int) -> Tuple[PokerAction, int]:\n        my_hand_key = self._get_hand_key(self.player_hands)\n        hand_strength = self.hand_strength_preflop.get(my_hand_key, 0.2) # Default to a weak hand if not specified\n\n        current_bet_to_match = round_state.current_bet - round_state.player_bets.get(str(self.id), 0)\n        \n        # Determine if I am big blind or small blind and what the initial bet is\n        is_big_blind = (self.id == self.big_blind_player_id)\n        is_small_blind = (self.id == self.small_blind_player_id)\n        \n        # Simple strategy based on hand strength and betting round\n        # Pre-flop strategy\n        if round_state.round == 'Preflop':\n            # Aggressive hands: AA, KK, QQ, AKs, AQs\n            if hand_strength >= 0.8:\n                if current_bet_to_match == 0: # Can check\n                    return PokerAction.RAISE, min(remaining_chips, self.blind_amount * 3)\n                elif current_bet_to_match < remaining_chips * 0.2: # Small bet\n                    return PokerAction.RAISE, min(remaining_chips, current_bet_to_match * 2 + self.blind_amount) # Aggressive raise\n                elif current_bet_to_match >= remaining_chips * 0.2 and current_bet_to_match < remaining_chips:\n                    return PokerAction.CALL, 0\n                else: # Bet is too high to call, but we have strong hand, so all-in\n                    return PokerAction.ALL_IN, 0\n            # Medium hands: JJ, TT, AJs, KQs, AKo, AQo, suited connectors\n            elif 0.5 <= hand_strength < 0.8:\n                if current_bet_to_match == 0:\n                    return PokerAction.RAISE, min(remaining_chips, self.blind_amount * 2)\n                elif current_bet_to_match <= self.blind_amount * 2: # Call if not too expensive\n                    return PokerAction.CALL, 0\n                else: # Bet too high for medium hand\n                    return PokerAction.FOLD, 0\n            # Weak hands: anything else\n            else:\n                if current_bet_to_match == 0 and not is_big_blind and not is_small_blind: # Just check if possible and no blinds\n                    return PokerAction.CHECK, 0\n                elif current_bet_to_match == 0 and is_big_blind and round_state.player_bets.get(str(self.id), 0) == self.blind_amount * 2:\n                    # If I'm BB and no one raised my blind, I can check.\n                    return PokerAction.CHECK, 0\n                elif current_bet_to_match <= self.blind_amount: # Call only if minimal cost (small blind or limped pot)\n                    return PokerAction.CALL, 0\n                else:\n                    return PokerAction.FOLD, 0\n        \n        # Post-flop strategy (Flop, Turn, River) - very basic, just uses general aggressiveness\n        # This part of the bot does not use community cards effectively nor calculate real equity\n        # A more advanced bot would re-evaluate hand strength here.\n        \n        # Be more aggressive if pot is small (trying to steal) or large (committed)\n        pot_size = round_state.pot if round_state.pot > 0 else 1 # Avoid division by zero\n        aggressiveness_factor = min(1.0, remaining_chips / pot_size) # Adjust based on stack-to-pot ratio\n        \n        # Randomness to make it less predictable but within strategic boundaries\n        r = random.random()\n\n        if hand_strength >= 0.7: # Strong Hand (e.g., two pair, trips, straight, flush in simple terms)\n            if current_bet_to_match == 0:\n                # Bet roughly 50-70% of the pot\n                bet_amount = int(0.5 * round_state.pot + round_state.pot * 0.2 * r)\n                return PokerAction.RAISE, min(remaining_chips, max(round_state.min_raise, bet_amount))\n            elif current_bet_to_match < remaining_chips * 0.3 * aggressiveness_factor:\n                # Re-raise or call, lean towards raise\n                if r < 0.7: # 70% chance to raise further\n                    raise_amount = min(remaining_chips, max(round_state.min_raise * 2, current_bet_to_match * 2 + self.blind_amount))\n                    return PokerAction.RAISE, raise_amount\n                else:\n                    return PokerAction.CALL, 0\n            else:\n                # Bet is too high or we're pushed, consider all-in\n                if r < 0.5: # 50% chance to push all-in\n                     return PokerAction.ALL_IN, 0\n                else:\n                     return PokerAction.FOLD, 0 # Sometimes fold strong to avoid tilting\n        elif 0.4 <= hand_strength < 0.7: # Medium Hand (e.g., top pair, good kicker)\n            if current_bet_to_match == 0:\n                # Bet roughly 30-50% of the pot\n                bet_amount = int(0.3 * round_state.pot + round_state.pot * 0.2 * r)\n                return PokerAction.RAISE, min(remaining_chips, max(round_state.min_raise, bet_amount))\n            elif current_bet_to_match < remaining_chips * 0.15 * aggressiveness_factor:\n                return PokerAction.CALL, 0\n            else:\n                return PokerAction.FOLD, 0\n        else: # Weak Hand (e.g., high card, weak pair)\n            if current_bet_to_match == 0:\n                return PokerAction.CHECK, 0\n            elif current_bet_to_match < remaining_chips * 0.05 * aggressiveness_factor:\n                # Call only if very cheap\n                return PokerAction.CALL, 0\n            else:\n                return PokerAction.FOLD, 0\n        \n        # Fallback for safety (shouldn't be reached with proper logic)\n        return PokerAction.FOLD, 0\n\n    def on_end_round(self, round_state: RoundStateClient, remaining_chips: int):\n        # Good place to log/analyze round results\n        pass\n\n    def on_end_game(self, round_state: RoundStateClient, player_score: float, all_scores: dict, active_players_hands: dict):\n        # Game finished, final cleanup or logging\n        pass\n\n```\n```text\n```",
        "refusal": null,
        "reasoning": null
      }
    }
  ],
  "usage": {
    "prompt_tokens": 2858,
    "completion_tokens": 3002,
    "total_tokens": 5860
  }
}
================================================================================
